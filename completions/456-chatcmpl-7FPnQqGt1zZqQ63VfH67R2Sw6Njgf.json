{
  "input": {
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "You summarize web development podcasts"
      },
      {
        "role": "user",
        "content": "Syntax is a podcast about web development. Available at https://Syntax.fm"
      },
      {
        "role": "user",
        "content": "This episode is #456 entitled 10 Nifty Browser APIs"
      },
      {
        "role": "user",
        "content": "\nSummarize the provided podcast transcript into very succinct bullet points, each containing just a few words. The bullet points should correspond to different sections or topics discussed in the podcast. Include any opinions the hosts have.\n\nRemember, the key here is to read through the transcript carefully, identify the main points or topics, and then condense each one into a very brief, clear statement. It's also important to include timestamps if they're provided in the transcript, as they can help give a sense of the flow and structure of the podcast.\n\nAdditionally, Please create the following for this podcast episode:\n\n1. 1-2 sentence description about what is covered in the podcast. This should be a short, catchy, and interesting description. It should provoke the listener to stop what they are doing and listen to the podcast.\n1. 6-7 tweets for this podcast episode. These tweets should be short, catchy, and interesting. They should provoke the twitter user to respond an join in the conversation. Don't use any hash tags or emojis.\n2. 6-7 tweets about this podcast that can be tweeted by listeners of the show. Some examples are \"This is a fantastic episode about ___\", or \"I really enjoyed the part about ____\"\n3. 3-4 hashtags that categorize the episode. these will be used as topic tags on the website.\n4. A summary of the podcast into a title. It should be catchy, slightly click-baity, and make the listener want to stop what they are doing and watch it.\n5. Keep track of any links or websites mentioned in the podcast. These will be used as links on the website. If you can't find the link, provide only the name of the website.\n6. tally the time each speaker speaks. This will be used to create a pie chart of who speaks the most.\n7. For each speaker and topic, report sentiment analysis for positive, neutral, negative amd uncertain\n8. Provide a MidJourney prompt to create artwork for the podcast\n\nYou may exclude transcripts from the Announcer and ad-reads from sponsors, unless the sponsor is Sentry.\n\nReturn each of these things in JSON format that looks like this:\n\n{\n  \"title\": \"...\",\n  description: \"...\",\n  \"summary\": [{time: '02:33', text: \"...\"}],\n  \"tweets: [\"...\"],\n  \"listener_tweets\": [\"...\"],\n  topics: [\"...\", \"...\"],\n  links: [{ name: 'Name of link', url: 'https://example.com\"}, \"...\"],\n  speaker_times: [{name: 'Wes Bos', time: '02:33'}, \"...\"],\n  sentiment_analysis: [{ topic: 'JavaScript', speaker: 'Wes Bos', sentiment: 'positive'}, ...],\n\n}"
      },
      {
        "role": "user",
        "content": "\n00:00 Wes Bos:\nLet's get ready to syntax.\n\n00:04 Announcer:\nListen to Syntax, the top web development podcast with Scott Zelensky and West Boss. Strap in and enjoy!\n\n00:14 Wes Bos:\nWelcome to the tastiest web development podcast, discussing browser APIs or vanilla JavaScript/web APIs. We'll explore 10 nifty things you can do in the browser and their uses. We are sponsored by Prismic, Log Rocket, and Freshbooks, which we'll discuss later. I'm West Bos, a Canadian developer, and joining me is Scott Tolinski. How are you doing today?\n\n01:02 Announcer:\nI'm doing good. Loving our new dishwasher, as I'd been hand washing our kids' dishes for 1.5 hours every night for around 8878 months since moving in. Now I can put the kids to bed with Courtney, so I'm in a good mood. Everything else, like ESLint, is fine.\n\n01:40 Wes Bos:\nThat dishwasher you purchased is amazing. I unloaded ours in the dark, but yours has built-in lights!\n\n01:51 Announcer:\nSeems like a spaceship when opened. Astonishing. The coolest thing is the dishwasher's easy sliding drawers. Unlike washer drawers, these are almost too smooth. I'm a fan. Had a good week here. Dishwasher talk.\n\n02:21 Wes Bos:\nSomeone tweeted they enjoy our podcast as we don't discuss olive oil initially. But, we might actually do that.\n\n02:31 Announcer:\nIt feels like something we might actually do, and I'm pretty sure we've done that. I've been doing outdoor landscaping work this weekend, like cutting down a giant tree by myself near a power line. It was leaning, and I hoped the wind would knock it down, but it just leaned more. I decided to handle it, as a developer would, one step at a time. I knew where I wanted it to fall, followed YouTube instructions, cut the wedges, and a 15-20 foot tree landed exactly where I planned. I'm very impressed with myself, and that's good.\n\n03:37 Wes Bos:\nI often watch tree disasters, like them falling on houses. Ever received hate? I posted a tree falling on Instagram and got so much hate, even though we have thousands of trees on our property. People were upset about removing a fine tree that would eventually rot.\n\n03:57 Announcer:\nOh, no hate, but I had to preemptively tackle this issue. The tree was growing into power lines and shouldn't have been planted there. It had a major lean and was a disaster waiting to happen, even though still alive. I didn't want it falling on our patio furniture, a kid, or the dog. So I took it down. We have a literal forest, so one tree won't make a difference. Alright, let's get into our 10 items. First is\n\n04:35 Wes Bos:\nMany of you have likely used Get user media, a browser API that accesses user media like webcams and microphones. There are additional APIs that let you access multiple cameras simultaneously. Check out hair.wesbos.com, where I created an app displaying multiple webcams at once. I had nine webcams working together, and you can see their names as well as the front or back designation on mobile devices. I even tested it on my car's head unit, which recognized the dash cam as a wheel cam but crashed after some time.\n\n05:53 Announcer:\nkinda interesting. Is is your dash cam, like, integrated into the car?\n\n05:57 Wes Bos:\nNo, the dash cam is separate but has a USB interface for power and viewing. The head unit I bought has an app to review dashcam footage. It's smart enough to communicate with the USB dash cam, likely similar to a webcam.\n\n06:21 Announcer:\nYeah, there's so much to do with getUserMedia Vercelâ€”lots of fun stuff. I think we need more fun side projects where you take the webcam feed, pipe it to a canvas, apply effects and play with pixels. It's not just about building practical Zoom alternatives. Check out my JavaScript 30 course for ideas.\n\n06:56 Wes Bos:\nWe build lots of enjoyable things using the webcam by taking its feed, known as a source object, and placing it into a video element. Once in the video element, it's like a Pnpm or JPEG, which can be transferred to a canvas element. From there, the possibilities are endless, with access to every pixel.\n\n07:22 Announcer:\nYeah, there's lots of potential in newer APIs like the File System API. I recently did a course on this, which is why I'm so familiar with it. The File System API allows access to reading files, directories, and writing files. In our course, we built an SVG editor in under 40 lines of code. It saves directly to your local file system instead of downloading a new file or zip like previous file editors.\n\nWith a file or directory picker, you get access to handles, which can either be a file or directory type. You can modify and save a file with a permissions popup in the browser. It's surprisingly simple to use - under 40 lines of vanilla JS for a basic file editor.\n\nHowever, compatibility is the biggest issue since it mainly works with Chromium-based browsers and has limited support in Safari. There's no support in Firefox or Internet Explorer. If you're building an electron app using Chrome, you can take advantage of this API for some impressive functionality.\n\n11:10 Wes Bos:\nThat's interesting, but not a huge Deno issue, as many file system API use cases involve electron applications, which only run in Chrome environments. According to MDN, this interface won't grant access to user's file system but provides a virtual drive within the browser sandbox. To access user's file system, you need to involve the user, like installing a Chrome extension. It seems usable in Firefox, but only read-only and within a sandbox.\n\nThis becomes tricky when crossing from the browser sandbox to user's computer, as potential security issues arise, enabling access to user's files. This concern over safety is why websites are secure and why iPhones avoided Flash, as it's a third-party program that runs locally on devices instead of the browser, accessing the entire computer's file system.\n\n12:39 Announcer:\nPossible security issue there. Windows file, common troll to delete system 32. Could have a delayed system, yes.\n\n12:54 Wes Bos:\nLet's discuss geolocation in ad breaks, an API that's been around for 12 years. With navigator.geolocation, you can watch the current position or just get the location once, useful for maps or zoning in without needing postal codes. However, it's annoying when websites immediately ask for location access. Ideally, they should request it when finding the nearest store or similar. Denying access can make unblocking geolocation difficult for regular users, as the UI is often confusing, especially on mobile.\n\n14:04 Announcer:\nI was on Home Depot's website last night, and it's funny you mention it because they were asking my location, activities, and company. I didn't want to share that info - so weird how they ask such personal questions.\n\n14:26 Wes Bos:\nIt's uncomfortable when a website prompts you as soon as you open it. For example, when visiting Home Depot's website, it tells me the closest store is in Niagara Falls, even though I haven't given it access to my location. They can estimate the location using server-side info but should ask for access to get more accurate results. So, Home Depot should improve this aspect.\n\n15:04 Announcer:\nData back in CMS's. Why aren't you so cool like 1 of our sponsors today, Prism.\n\n15:11 Wes Bos:\nYes, Prismic is a headless CMS that enhances websites through rapid creation of on-brand pages using reusable website sections, or slices. It focuses on mapping data pieces to components, allowing for versatile page assembly with various data types like users and food. Using any front-end framework, you can create slices in Prismic and connect them into a single page via the UI, promoting growth and marketing flexibility.\n\nPrismic.IO/syntax is great from both UI and developer perspectives. Thanks, Prismic, for sponsoring. Next, we'll discuss the permissions API. West, have you looked at it? It involves access to features like notifications.\n\n17:08 Announcer:\nThe Permissions API allows you to check if you have permission to use certain features before proceeding. It's supported by a few notable APIs like clipboard, notifications, push API, and WebMedI. However, this API has poor support and is difficult to implement consistently across browsers. It allows checking user permissions statuses in JavaScript in the browser, but caution is advised due to its varied support. This API might tempt you, but it's frustrating to utilize effectively.\n\n18:50 Wes Bos:\nYeah, it's frustrating on the web when someone says no to a permission, as you often have no API to fix it, especially for the clipboard and other notifications. This can be annoying for users when they need to grant access to features like the webcam for important tasks, such as taking a photo of a driver's license.\n\nUndoing that decision can be difficult, especially on mobile. Many apps first use their own UI to ask for access before prompting the user. You typically only have one shot to ask for access, which can be challenging even for technical users trying to figure out how to reverse those choices.\n\n19:54 Announcer:\nhow do I change this setting?\n\n19:56 Wes Bos:\nYeah, what's up with the cop icon? You have to scroll through 40 apps to find it, which is annoying. Programmatically doing it could lead to misuse, like constant pop-ups. It's like ad blocking, where pop-ups have good uses but can be abused. They had to tie pop-ups to real clicks. Remember when pop-up blockers were a big issue?\n\n20:36 Announcer:\nI sometimes watch pirated sports content, like the Colorado Avalon games in Denver, which are blacked out if you don't have Comcast. To watch my local hockey team, I visit shady websites, particularly on iOS, and deal with countless pop-ups constantly flying at me and opening new tabs on the iPad. Pop-ups are definitely still an issue for me. It's crazy.\n\n21:15 Wes Bos:\nYeah, Permissions API. One of those. Think it'll improve? Still in progress? Will it eventually support?\n\n21:24 Announcer:\nToday, we're discussing Chrome's excellent support for various APIs, as evident by the green check marks. It's a no-brainer for browsers like Firefox and Safari, including iOS Safari and Android web view, to improve their support for features like permission access and query permissions. However, it's disheartening to see the same pattern of limited support in these browsers. Despite some APIs having experimental flags or caution signs, the permissions API is particularly useful and desired.\n\n22:36 Wes Bos:\nBut you can't. So, next up, I'll let you discuss this, as it's your favorite. I haven't used it directly, but I've utilized things that use the web animation API. Sometimes I just browse MDN docs and think, wow, what a different world. So, web animations.\n\n23:00 Announcer:\nThe Web Animations API is a method for constructing animations using JavaScript without diving into CSS animations or transitions. It allows you to create an animation and control its playback, such as play, pause, reverse, and update the playback rate. Unlike CSS animations, you have to create the animation and then trigger it using an event or call in JavaScript.\n\nThe Web Animations API is good because it doesn't require a library but falls short compared to browser frameworks like Framer Motion and installed animations. The creator of Framer Motion introduces Motion 1, a library that simplifies the Web Animations API and offers a smaller library size, working with everything.\n\nMotion 1 uses TypeScript to apply CSS properties and interpolate spring values, making it more lightweight than Framer Motion while still supporting various functionalities. The website also features an appealing deep blue, yellow, and black color scheme.\n\n25:46 Wes Bos:\nWow, the Web Animations API can be frustrating, but it's meant to be built on top of, like primitives in the browser. Nice layers can be created on top of it, similar to fetch, which is ergonomic to use directly. Some audio APIs are also frustrating, but can have great layers built on them.\n\nNext up is the Resize Observer API, a favorite and used in commerce talks and personal websites. Use it to know when an element's width, height, or position changes on the page. Previously, only window resizing could be listened for. An example is a video player and a list of videos adjusting their sizes based on personal preference.\n\nSimilar to container queries, you can use TypeScript to know when an element's size changes programmatically. Handy for determining if an element is on screen, or pausing/playing a video based on scrolling position.\n\n28:10 Announcer:\nYes, we use container queries by creating a Sfeldt action that assigns classes based on browser width, using minimal code. We implemented a new resize observer to get the current node's width and alter its classes according to the provided dimensions array. This efficient method is under 20 lines of code and proves resize observer is a viable approach. Although it can be performance-heavy, we've used it on all cards in a large grid without issues. Overall, haven't encountered problems with resize observer.\n\n29:10 Wes Bos:\nalternative: check every 300ms for changes. Browser knows when elements are on/off page, and when they're bigger/smaller since it paints them. So who better to inform of changes than the device that is\n\n29:31 Announcer:\nPainting rectangles on browsers and using various APIs might lead to errors. A solution to stay aware, such as Log Rocket, could help you by providing a video replay of what exactly broke your site, error logs, and user experiences. Log Rocket offers new features and tools to improve user experiences on your websites by stopping guesswork on bug occurrences, tracking customer engagement with heatmaps, and making data-driven design decisions.\n\nThe Clipboard API enables copying and pasting features, including images, depending on browser support. Copying text is widely supported except for Internet Explorer. To utilize this, simply use 'navigator.clipboard.readText' along with some text, and it returns a promise. You can also write text through event-triggered actions like paste buttons. However, pasting requires user permission, given its invasiveness, before accessing the clipboard. The API can handle media but has limited support. The basic copying and pasting of text are easily implemented using 'navigator.clipboard.readText'.\n\n32:38 Wes Bos:\nOur coupon dashboard enables copying coupons programmatically for 20% off, $10 off, etc., without needing a function, just an onclick handler. I wonder if you can tell if something's in someone's clipboard, like iPhone apps that detect a 1-time password and offer to paste it - a convenient feature to avoid holding and waiting for the bubble.\n\n33:32 Announcer:\nYou just read the text. I've swapped \"read\" with \"write\" several times in the past minute. If I did that, then yes, it can read your text with permission. It will prompt you with a browser notification, requesting access to your clipboard. After reading, it checks if it matches a specific type like 6 numbers. Does it resemble a bank account? Copy this. Beautiful.\n\n34:12 Wes Bos:\nNext, we have Bos storageAPI, including both session storage and local storage. Local storage is widely used as a key-value store for text only. To store objects, numbers, etc., it's best to store them as JSON to maintain structure and types. There's also session storage. What distinguishes local from session storage, Scott? Session storage\n\n34:51 Announcer:\nEssentially, session storage disappears when the session ends (browser or tab closes), while local storage remains. The interface for both is the same, just using \"session storage\" instead of \"local storage.\" Storing something in session storage means it's gone once the tab is closed. Personally, I don't use session storage and would be curious about its use cases.\n\n35:32 Wes Bos:\nYeah, it'd be useful if library computers, used repeatedly by different people, didn't store data like cookies to prevent possible login issues. Most libraries have a wipe sequence to clean the system, but not all. This is a good use case.\n\n36:04 Announcer:\npreviously on Scott. My kids are learning the wipe sequence right now. That's That's a good 1.\n\n36:10 Wes Bos:\nWe've discussed this before - is session storage shared between tabs? I can't think of a good use case for that. For example, Paypal used to require you to log in if you opened a new tab. It was frustrating, but they fixed it. There are still websites that don't allow new tabs though. Web storage is interesting for storing data locally, almost like a small database. It's useful for temporarily saving something, like filling out a form.\n\n37:06 Announcer:\nWhen someone refreshes the page, store data in local storage and insert it back into the form. Discussing one sponsor, Freshbooks - cloud accounting. West, tell us about Freshbooks' cloud accounting?\n\n37:24 Wes Bos:\nAccounting is crucial for businesses. Track invoices, expenses, taxes, projects, time, and even kilometers for driving. A helpful feature is importing expenses directly from credit cards, matching them with receipts to avoid missed expenses, lowering taxable income. Freshbooks supports this process. Visit freshbooks.com/syntax for a 30-day free trial, no credit card needed. Thanks, Freshbooks, for sponsoring. Now, let's cover the last two topics in this episode.\n\n38:20 Announcer:\nFirst, speech synthesis, or text to speech, is simpler with browser APIs than expected (except for a few). I remember making the Mac talk was entertaining, but now it's effortless in browsers with various uses. For example, I built a dance app that randomly shouted dance moves to help learn different sequences, which was easy to implement.\n\nAdditionally, you can modify pitch, voice, and speed. By using a text input box and playing around, you'll quickly see that text-to-speech implementation feels almost too easy.\n\n39:56 Wes Bos:\nI use speech synthesis in my JavaScript 30 course, and it's amazing how quickly it works. The Mac supports many more voices than Windows. These APIs utilize system APIs, and you can change the pitch and tone to create different sounds. In my free course, we create the Vercelinator 5000, allowing you to input text, adjust the rate and pitch. It's a great exercise for new coders. With just six lines of code, you can make something that speaks back to you. Truly empowering!\n\n41:06 Announcer:\nIt's enjoyable and simply entertaining. Happy with your fun-named choice, as it adds to the charm. Precisely.\n\n41:13 Wes Bos:\nThis API is well supported. Speech synthesis isn't supported in Opera Android, web view android, and Internet, but works well everywhere else. Next is speech recognition, the opposite of text to speech. It takes microphone input.\n\n41:44 Announcer:\nfeed. It's speech to text, not text to speech. Yes, what did I say? Maybe the opposite, or I heard the opposite. Okay, it's what you're saying to text.\n\n41:55 Wes Bos:\nIt recognizes what you're saying, allowing you to set up grammars, language, and continuous speech. While speaking, it streams results like Siri, Google Home, or Alexa, offering alternatives and confidence levels for speech accuracy. A game called Bos Speech Colors was created, with players quickly saying CSS colors to progress. Sadly, it doesn't work in Firefox or Opera, but works well in Chrome, Edge, and Safari. Grammars are a property of the speech recognition interface, returning understood collections. In an example, the grammars given were color names. It can be challenging to pronounce colors like magenta, khaki, or Fuchsia. Mentioned a talk from Paul Irish, who used to say \"Gattle of Pires\" and \"Futch,\" suggesting to have him on the show.\n\n44:36 Announcer:\nHe's got stories to tell I bet. That'd be awesome. If we wanna talk old web stuff, like -- Yeah.\n\n44:42 Wes Bos:\n- Perhaps a Sunday afternoon podcast chatting with the oldies was once done.\n\n44:49 Announcer:\nChatting with oldies. Yes, definitely. They'd enjoy it. We named it talking with oldies. People would appreciate it.\n\n44:59 Wes Bos:\nWe'll cover various APIs today. To make it fun and educational, try creating examples for each API. Your perspective will broaden, and it's a refreshing break from typical tasks like fetching data and using frameworks. Most APIs require a local server because permissions are tied to an origin. Keep in mind that most won't work on HTTP; you'll need an SSL certificate for deployment on a website. However, they will work on localhost since SSL certificates are increasingly common.\n\n45:51 Announcer:\nEasy to use, SSL certificates are essential nowadays. For more info on browser APIs, check Wes's JavaScript 30 course or my exploring browser APIs course for real-world examples. Now, let's move to sick pics.\n\nI have a sick pick â€“ a $15 box for converting old VHS, mini DV or DV tapes into a digital format. It has RCA input and HDMI output. I connected my mini DV camera and Elgato CamLink capture card to convert old tapes easily. If you have VHS tapes, just connect them to this device and record it into QuickTime. It's a highly recommended $15 investment, especially if you've struggled with Firewire 400 and modern MacBook Pros.\n\n47:50 Wes Bos:\nRecently, my grandma moved out and we got a box of old family VHSs. My uncle bought a VCR from a thrift store to play them. I tried a different route with our van, which had HDMI input. Initially, I attempted to convert iPad lightning to HDMI, then to RCA, but faced copy protection issues with apps. Upon discovering the van's HDMI capability, I found that the official Apple lightning to HDMI adapter worked, making me happy.\n\n49:07 Announcer:\nshow.\n\n49:08 Wes Bos:\nI know, it's called HDCP (high bandwidth digital content protection). Netflix and Disney Plus only work with the official Apple 1 due to some special sauce inside. People on Twitter discussed converting HDMI for old theaters with $50,000 projectors. They'd buy a dozen random adapters from Amazon; some worked, some didn't. Once they found one that worked, they'd return the rest. It's crazy.\n\n50:03 Announcer:\nAs a former projectionist, I attended a projection conference and was asked to blog about it, even though I doubted anyone would read it. We had a massive rack of inputs and outputs for the projector, and sometimes, if a DVD didn't work in one player, it would work in another. There were many strange tech mysteries like that, with things either working or not working.\n\n50:57 Wes Bos:\nI ain't a sick pick. Slim LED pot lights. Installed them in many places. They're tiny, thin, and come in sizes like 4, 6, and 8 inches. Just need a hole saw, drill a hole, and run wire from an existing ceiling light.\n\nIn my office at the cottage, the fan light combo wasn't bright enough. Drilled two more holes, added two super bright LED lights, and tapped into the main light. No need for junction boxes since it comes with one. Clip it in, add a strain relief from the hardware store, and it's done for around $8 a light.\n\nThey come in various colors. I'm testing one for my new office, unsure of the desired brightness. These lights are cheap, easy to get, and work well. To modernize a space with a ceiling light, anyone with a YouTube video can figure it out. Shout out to LEDs.\n\n52:52 Announcer:\nWe have an older light fixture, not a chandelier, above our kitchen table with gold candle-style lamps. I replaced them with straight LEDs. While installing, I noticed how hot the old ones were, indicating the energy they used. It's amazing to have LEDs in our world.\n\n53:32 Wes Bos:\nA couple years ago, we purchased a new overhead light for one of our powder rooms and installed beautiful round incandescent bulbs just before Canada banned them. The room gets noticeably hot when the lights are on, indicating their inefficiency. Now, it's difficult to buy incandescent lights in Canada unless there's a specific use case, such as an easy bake oven.\n\n54:10 Announcer:\nYeah.\n\n54:12 Wes Bos:\nDefinitely, had to purchase since my daughter's easy bake oven broke. Opened it, only a 100-watt bulb inside.\n\n54:22 Announcer:\nYeah. This is all the time. Yeah. I had a creepy crawlers. I know all about that.\n\n54:26 Wes Bos:\nLovely colors rule. Good thing, 100-watt bulbs are available as work lights. Oddly, 1000x brighter LED lights also exist for work.\n\n54:39 Announcer:\nThan a light bulb, but many have old, super thick ones. Fortunately, I found a 100-watt bulb and we're good. Before wrapping up, I noticed you spoke about your new office with an outdoor light. My setup isn't as interesting, and I'd like to hear opinions. I have a red Philips Hue bulb outside my door, but I haven't found an ergonomic way to turn it on while recording. I have a Stream deck macro pad, but it doesn't connect to home automation stuff. There's always a gap, and I just want to connect it, so if anyone has ideas for linking a Hue bulb to a hardware button, let me know.\n\n55:45 Wes Bos:\nLet me know. You should code a serverless function to hit the Philips Hue API and create stream deck buttons. Here's an idea: Instead of turning the light on/off, when you hit record and press F19, enable \"do not disturb\" mode on your computer. Create a script that checks if you're in do not disturb mode, and if so, ping Philips Hue to turn on the light. This way, you don't forget to turn it on. You can also flip it on when you want. Maybe even get an \"on air\" sign. This can help in planning wiring for your new office.\n\n57:17 Announcer:\nMake sure you get that Ethernet.\n\n57:19 Wes Bos:\nYeah, I'm gonna run 2 Cat-6 Ethernet cables to my desk, which should be enough. I'll also run an empty tube into the utility room for fishing. There's no need for fiber at the desk since we have fiber and Ethernet in the house. If I were starting from scratch, I'd get XLR.\n\n57:51 Announcer:\nMy monitors and XLR â€“ we discussed flying the monitors, and my buddy suggested hitting XLR through the walls. I refused, but wondered how to connect it to my computer. In professional studios, they have a Pnpm outlet on the wall for flying from the ESLint, with XLR plugs in the ceiling connected to wall outlets.\n\n58:28 Wes Bos:\nYeah. So you can hang a microphone from the ceiling.\n\n58:31 Announcer:\nYou can do any of that. Yeah. When we I I well, he he specializes in, like,\n\n58:37 Wes Bos:\nRecording studio design is different, but still interesting. I'd love to put my entire rack in a separate room, like Linus Tech Tips did by putting a server in a server room and running a Thunderbolt cable to his monitor. But his wife complained about having to reboot it, so it's not perfect. A long Thunderbolt cable is also expensive. We should have a talking shop offices episode about this stuff. Remember to check out westbos.com/courses for course deals and support both me and Scott.\n\n59:54 Announcer:\nNo, just joking. Find all my content at VercelUpTutorials.com. We release a new course monthly, including exploring browser APIs, building a real-time chat app with John Meyers, and Svelte 3D. Check out LevelUpTutorials.com and get ESLint. Enjoy the current price before our big redesign! Join now!\n\n01:00:35 Wes Bos:\nThanks everybody for tuning in. Get you on Friday.Peace. Peace.\n\n01:00:41 Announcer:\nVisit syntax.fm for our complete show archive. Subscribe in your podcast player and leave a review if you enjoy the show.\n\n01:01:00 Wes Bos:\nMy name is Wes. My dog eats food on the moon.\n\n01:01:06 Announcer:\nMy name is Scott,Please buy some purple cheese before meeting my brother.\n"
      }
    ]
  },
  "output": {
    "id": "chatcmpl-7FPnQqGt1zZqQ63VfH67R2Sw6Njgf",
    "object": "chat.completion",
    "created": 1683908436,
    "model": "gpt-4-0314",
    "usage": {
      "prompt_tokens": 6700,
      "completion_tokens": 946,
      "total_tokens": 7646
    },
    "choices": [
      {
        "message": {
          "role": "assistant",
          "content": "{\n  \"title\": \"10 Nifty Browser APIs: Exploring Vanilla JavaScript and Web APIs\",\n  \"description\": \"Discover 10 nifty browser APIs, their usability, and how they can enhance your web development projects. From getUserMedia to geolocation, learn more about these intriguing tools in the newest episode of Syntax.\",\n  \"summary\": [\n    {\"time\": \"00:14\", \"text\": \"Introduction to 10 nifty browser APIs\"},\n    {\"time\": \"04:35\", \"text\": \"Get user media API\"},\n    {\"time\": \"07:22\", \"text\": \"File System API\"},\n    {\"time\": \"14:04\", \"text\": \"Geolocation API\"},\n    {\"time\": \"17:08\", \"text\": \"Permissions API\"},\n    {\"time\": \"23:00\", \"text\": \"Web Animations API\"},\n    {\"time\": \"28:10\", \"text\": \"Resize Observer API\"},\n    {\"time\": \"32:38\", \"text\": \"Clipboard API\"},\n    {\"time\": \"34:12\", \"text\": \"Session Storage and Local Storage\"},\n    {\"time\": \"41:44\", \"text\": \"Speech Synthesis API\"},\n    {\"time\": \"53:32\", \"text\": \"Speech Recognition API\"}\n  ],\n  \"tweets\": [\n    \"Got multiple webcams? Learn how getUserMedia and other browser APIs can enhance your web development!\",\n    \"Explore the File System API and its ability to read, write, and access files directly in the browser.\",\n    \"Discover the power of geolocation in web development with the Geolocation API.\",\n    \"Understand the potential and challenges of the Permissions API in today's web landscape.\",\n    \"Animate your web projects with the Web Animations API for a more dynamic user experience!\",\n    \"Keep track of element position changes with the Resize Observer API!\"\n  ],\n  \"listener_tweets\": [\n    \"Absolutely loved the episode about 10 nifty browser APIs, totally changed my perspective on web development!\",\n    \"I found the section on the File System API to be super insightful!\",\n    \"The Geolocation API explanation really helped me understand how to use it effectively in my projects.\",\n    \"Awesome episode discussing the Web Animations API and its potential uses.\",\n    \"Got so many ideas for projects after listening to the episode about browser APIs!\",\n    \"The 10 Nifty Browser APIs episode of Syntax really showcases the versatility of vanilla JavaScript!\"\n  ],\n  \"topics\": [\"Browser APIs\", \"Web Development\", \"Vanilla JavaScript\"],\n  \"links\": [\n    {\"name\": \"hair.wesbos.com\", \"url\": \"https://hair.wesbos.com\"},\n    {\"name\": \"JavaScript 30 course\", \"url\": \"https://javascript30.com\"},\n    {\"name\": \"Prismic.IO/syntax\", \"url\": \"https://prismic.io/syntax\"},\n    {\"name\": \"Framer Motion\", \"url\": \"https://www.framer.com/motion/\"},\n    {\"name\": \"Motion 1\", \"url\": \"https://motion.dev\"},\n    {\"name\": \"Freshbooks.com/syntax\", \"url\": \"https://freshbooks.com/syntax\"}\n  ],\n  \"speaker_times\": [\n    {\"name\": \"Wes Bos\", \"time\": \"29:42\"},\n    {\"name\": \"Scott Tolinski\", \"time\": \"30:55\"}\n  ],\n  \"sentiment_analysis\": [\n    {\"topic\": \"Get user media\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"File System\", \"speaker\": \"Scott Tolinski\", \"sentiment\":\"positive\"},\n    {\"topic\": \"Geolocation\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"Permissions API\", \"speaker\": \"Scott Tolinski\", \"sentiment\": \"neutral\"},\n    {\"topic\": \"Web Animations\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"Resize Observer\", \"speaker\": \"Scott Tolinski\", \"sentiment\": \"positive\"},\n    {\"topic\": \"Clipboard API\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"Session Storage and Local Storage\", \"speaker\": \"Scott Tolinski\", \"sentiment\": \"neutral\"},\n    {\"topic\": \"Speech Synthesis\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"Speech Recognition\", \"speaker\": \"Scott Tolinski\", \"sentiment\": \"positive\"}\n  ]\n}"
        },
        "finish_reason": "stop",
        "index": 0
      }
    ]
  }
}