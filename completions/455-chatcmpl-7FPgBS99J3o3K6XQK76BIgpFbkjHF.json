{
  "input": {
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "You summarize web development podcasts"
      },
      {
        "role": "user",
        "content": "Syntax is a podcast about web development. Available at https://Syntax.fm"
      },
      {
        "role": "user",
        "content": "This episode is #455 entitled TypeScript Fundamentals Ã— Narrowing, Discriminating Unions, and Type Guards"
      },
      {
        "role": "user",
        "content": "\nSummarize the provided podcast transcript into very succinct bullet points, each containing just a few words. The bullet points should correspond to different sections or topics discussed in the podcast. Include any opinions the hosts have.\n\nRemember, the key here is to read through the transcript carefully, identify the main points or topics, and then condense each one into a very brief, clear statement. It's also important to include timestamps if they're provided in the transcript, as they can help give a sense of the flow and structure of the podcast.\n\nAdditionally, Please create the following for this podcast episode:\n\n1. 1-2 sentence description about what is covered in the podcast. This should be a short, catchy, and interesting description. It should provoke the listener to stop what they are doing and listen to the podcast.\n1. 6-7 tweets for this podcast episode. These tweets should be short, catchy, and interesting. They should provoke the twitter user to respond an join in the conversation. Don't use any hash tags or emojis.\n2. 6-7 tweets about this podcast that can be tweeted by listeners of the show. Some examples are \"This is a fantastic episode about ___\", or \"I really enjoyed the part about ____\"\n3. 3-4 hashtags that categorize the episode. these will be used as topic tags on the website.\n4. A summary of the podcast into a title. It should be catchy, slightly click-baity, and make the listener want to stop what they are doing and watch it.\n5. Keep track of any links or websites mentioned in the podcast. These will be used as links on the website. If you can't find the link, provide only the name of the website.\n6. tally the time each speaker speaks. This will be used to create a pie chart of who speaks the most.\n7. For each speaker and topic, report sentiment analysis for positive, neutral, negative amd uncertain\n8. Provide a MidJourney prompt to create artwork for the podcast\n\nYou may exclude transcripts from the Announcer and ad-reads from sponsors, unless the sponsor is Sentry.\n\nReturn each of these things in JSON format that looks like this:\n\n{\n  \"title\": \"...\",\n  description: \"...\",\n  \"summary\": [{time: '02:33', text: \"...\"}],\n  \"tweets: [\"...\"],\n  \"listener_tweets\": [\"...\"],\n  topics: [\"...\", \"...\"],\n  links: [{ name: 'Name of link', url: 'https://example.com\"}, \"...\"],\n  speaker_times: [{name: 'Wes Bos', time: '02:33'}, \"...\"],\n  sentiment_analysis: [{ topic: 'JavaScript', speaker: 'Wes Bos', sentiment: 'positive'}, ...],\n\n}"
      },
      {
        "role": "user",
        "content": "\n00:01 Announcer:\nMonday. Monday.Deno. Open wide dev fans. Get ready to stuff your face. With JavaScript, CSS, node modules, barbecue tips, get workflows, breakdancing,soft skills, web development, the hastyest,the craziest, the tape wept developmenttreats. Coming in hot. Here is west. Barracuda,Bos, and Scott El Doro Loco. Totallyski.\n\n00:28 Scott Tolinski:\nWelcome to syntax.On thisMonday, hasty treat,We are going to be talking about some TypeScriptfundamentals. We're gonna be talking about what is called a type narrowingdiscriminatingunions and type guards. Basically,we're gonna be helping you solve some of those errors that pop up in your TypeScript code that make you very frustrated because you say, hey, this thing is supposed to be this thing. Why is it giving me an error? My name is Tolinski. I'm a developer from Denver, Colorado. And with me, as always, is West Bos.\n\n01:01 Wes Bos:\nCan you narrowIs that from? Is that Simpsons?\n\n01:05 Scott Tolinski:\nI don't know. I have never heard that Can't Collection of words in that melody.\n\n01:10 Wes Bos:\nCan you narrow.\n\n01:12 Scott Tolinski:\nThere's like a Oh, can you narrow. Yes. Oh. Yeah.Yeah. That kindathat kinda says some sense to me.Oh, that's a good 1. As soon as I don't do very many some business jokes, but that 1 came out a came out a left field. It did. It did. Mighty have a left field. What did come out of Leftfield West is our 2 sponsors today, which is Century and Payments Hub. So Century is the perfect place to see all of your errors and exceptions and mark them as Deno, attach them to releases them to GitHubissues oreven just users. You can create an issue directly from something that is an issue, an exception in your code. You can assign it to a user right then and there. And more importantly, you can see all of the things that you might want to know to solve that issue for For instance, right, maybe what operating system? What browser? Oh, like, you can see that this is this is coming in from an Internet Explorer on an old Windows computer. You might say, you know what? I don't need to solve this issue. I I feel like I I don't need to solve this issue because this is gonna be more trouble than it's worth. Either way, Century is the place to keep track of everything that's going on in your application and make sure it's working its very best. So head on over to century dot I o, use the coupon code t eat treat all lowercase, all 1 word. You've got 2 months for free. Thank you so much for Century for being such a great sponsor. We also we got a brand sponsor on. So hold on and listen to this.\n\n02:32 Wes Bos:\nPayments Hub is a new sponsor of us, and they do some really cool stuffaroundeasy to use APIs and SDKsthat you can integrate into your application. And then this is not just you you throw it on your website and you sell something,they offer a fullfleet of APIs that allow you to integrate it into some software. You can integrate it intopoint of sale system. So, like, if you are building somethingthat allows your your product to go ahead. Like, you built a product, and your product is used by people who then need to onboard other people, you need to underwrite them.You have merchants in there. You have to process their payments. They providedata analyticsvia the API. They do all kinds of stuff. And, like, This seems likeI don't wanna say the the Swiss army knife, but like this seems like the API that you need if you need to be able to do some verycomplexstuff with your payment integration. Like, from very low Vercel, all the way through to to accepting payments. It looks awesome.They also have they've sent us over some stuff that I I'm just really excited about having this sponsor on myself because this seems really, really neat there. Code samples and everything looks pretty slick.They have somead read here that I'll I'll rattle through for you as well.Their dev portal gives you easy to use APIs and SDKs that allow developers to create e commerce websites develop in person point of sale applications and launch full featured omnichannelpayment solutions, our API rich product landscape is ideal forinterested in programmaticmerchant onboarding and accessingpayment transaction data through an API. Looks really sweet. So you wanna check it out at developerdot payments hub dot com forward slash syntaxThey have a really neat landing page that allows you just to quickly go through. They also have like a really they have like lots of products And on the products page, it will tell you which ones are PCI compliant and and which ones aren't and, like, which 1 you have to specifically choose if you need to be following differentdifferent compliance, which is very much appreciated because I've gone down that route a hole before. Check it out. Developer dot payments hub dot com forward slash syntax. Yeah. And and give that landing page a check too like you just mentioned because\n\n05:02 Scott Tolinski:\nit's always nice when these companies, they give us a little landing page just for -- Just for us. -- listeners to yeah. Just to say, here here's here's what it's up. You know, here's here's what's going on. And I think payments have did a great job here. So -- Yeah. -- thank you for payments up for being a sponsor. Yeah. Welcome. Alright. So let's get into\n\n05:21 Wes Bos:\ntypes of grip fundamentals. We've done a couple TypeScript fundamentals episode.And I was just going through all of the notes and and planning for my TypeScript course, and I was going throughthe sort of the area that you hit type narrowing and and creating type guards. I said, like, I don't think we've actually ever talked about this onon the podcast of 4. So we're going to dive into explaining.I think this is 1 of those things thatsounds scarier than it is. What do you think about that? Who's about to say that?So, it's like, oh,discriminating unions, type guards, type narrowing. Oh, that'ssounds complicated.And it it kinda just boils down toin TypeScript, you gotta checkthat you got the right type before you go ahead and use it. There is no assumingin TypeScript. I think is thethe way that I would like to put it. And TypeScript will yell at you if you try to assume that the data or the type coming in is what you assume it is,\n\n06:23 Scott Tolinski:\nand TypeScript will make a mess out of you. Exastively\n\n06:26 Wes Bos:\ncheck it.So should we well, should we, like, start off with explaining what type narrowing is? Yeah. So type narrowing is basically\n\n06:35 Scott Tolinski:\nyou're thinking aboutwhen things are defined as types, it's not always clear cut whether this thing is a string, a number, or whatever. Sometimes it's multiple things.And thenas you go, you might want to be using specific properties on 1 thing that don't exist on another thing. So let's say you hada variable that was a number or a string.Type narrowing is basically where you're saying, alright, I want to use a string method on this thing that doesn't exist in a number method or a method on a number type. So therefore, I need to narrow the type down to be string, so to say, so that we're not gonna get an error saying, you cannot use 2 lowercase on property of number or whatever that ends up being.The most common error that you do see associated with this is argument type of this or this or this or this is not assignable to parameter type of this. Type blank is not assignable to type blank.\n\n07:31 Wes Bos:\nYeah. It's it's\n\n07:33 Scott Tolinski:\nit's probably the most common error that you see in types script when you you you're getting going with it, you're working it, you're you're feeling very comfortable TypeScript, and then all of a sudden you say, how is this possible? I feel like I've done everything in my power to say that this is a string.And\n\n07:49 Wes Bos:\nthat's not always the case, and we're gonna talk a little bit about some strategies here. Yeah. Another example I have here that's coming from my upcoming course is that you've got a function that takes in a food. And that food could either be a type like, they like a food is kind of the generic type and then we extend the the generic food type and we create a sandwich and we create a pizza. Right?And if you have a function that takes in either a sandwich or a pizzaand in that function, there might be like toast. Right? You don't wanna well, maybe you would want to, but you don't wanna toast your pizza. You only wanna toast the bread of the sandwich. Right? So you might want toyou might just go ahead and say toast the bread, and it's gonna say, hey, hold on. I see that you could toast a sandwichButit's also possible that somebody is passing in a pizza in this case, and you haven'twritten any code that makes you check that it is a tostable foodbeforemoving in. Right? So type narrowing would be just as part ofAs part of that function, you would either check that it is a tostable food first before you go ahead and do the functions that are toastingor you would convert, like Scott said, you would convert the number to a string so that you're dealing with apples and apples before you go ahead and and go through the rest of the function. Yeah.\n\n09:13 Scott Tolinski:\nIt's it's amazing how, like,how many times the foodexamples creep into the show. It's funny it's so funny that it would be like,we could have, like, a t minusfood was last mentioned sandwiches were last mentioned x amount of days ago on this show because it always ends up going there. But I think they're examples, definitely. So first off is going to be 1 of the easiest ways to type guards, something that you're going to see very commonly, and that's just checking the type of the thing in a conditional.You'll frequently see this as like type of variableis equal toa string. Right? If maybe you have like a a union type that's either a string or a number, If you successfully wrap in an if statement, if this variable is type of string, then do this following thing, then that's going to fix that error because now you've added a an explicit check to make sure that the thing is a string before you try to use the string method. And I use this myself even in template code all over the place,in so JSX or TSX or Pnpm template code, all of that can be happy with the methods you're trying to use or pass down as things get more narrow. Yeah.\n\n10:19 Wes Bos:\nThat doesn't work with TypeScript types, so you couldn't sayif it is a type ofdog or type of animal or any of the custom type script types that you've created.And the reason behind It actually doesn't doesn't even work all that well with objects. And and the reason behind that is because if you say type oflike an array, it will tell you that it's an object. Right? Like almost everything in JavaScript pass, your basic,what, strings, numbers, booleansare just objects. So once you pass those sort of simple ones, there's a couple other ways you could check if something is a type. You could check if it hasa property that you're looking for, so you can use the property in object. Like, let's say you're trying tocheck if something was a podcastand you say, okay. I know that a podcast will have an MP3 property. You could say ifMP3 in podcast,or or Npm in audio, then go ahead and and in that case, you're checking that it has. And TypeScript will say, okay, I'll let that go because That's the only possible other type that's being passed in that would have an MP3 property. But if you pass in 2 things that were totally separate, then I'm gonna catch you on that. Right? So you could do prop in. You can also just say, if object dot property. So if media dot MP3,the down side to using the dot notation is that if you're using classesand extending prototypes,then that will also look up the prototype train. Chain,and that might not be what you want. So if you wanna actually check if the instance is on the thing or not, you can use the in. Yeah. And you can also use\n\n12:02 Scott Tolinski:\ninstance of as well for this type of thing, whereinstance of will also check up the prototype chain.So if you were to say, let's say you had avariable.Variable is an instance of a date, then you would know that you have access to the the datemethods,the things that you typically have on a date and not on a string So in union types, you can always use instance of as well\n\n12:31 Wes Bos:\nto narrow the branch, it's so to say. Oh, that's that's a really good example, actually. I was just, like, I was writing examples of like custom classes, but like,the date is 1 that's built in. Right? Anything that you need to use new onin TypeScript. So new date as an example, or if you create your own classand you wanna say newfood or new sandwich, then then you can check if it is an instance of because that object has been generated as an instance of1as an instance of the 1 they created. I'm sorry. Can't speak.\n\n13:09 Scott Tolinski:\nYeah. Definitely.Something that you probably hit more withany types of classes or complex objects Yeah. More in object oriented\n\n13:18 Wes Bos:\nobject oriented programmingis is much morecommon for you to to run into that type of thing. But it's it's it's you could still hit that and react as well, so you definitely need that in your tool belt.And then the last 1 we have here is just a custom type guards. And that is not anything that we didn't just talk about,but there is an idea in TypeScriptinstead of stuffing your functions full of if statements,you can take the logic outof those functions and just put them in their own functions. So you could say function is a sandwichthat accepts a type of food.And then from that, you can just returnifany of the type of, the in, the property check, or the instance of and that will return a bullion,but the only like the kind of like the weird thing or the interesting thing about that in TypeScript is the return typeof a type guard. Again, remember, a type guard is just a function that returns whether something is a type or not using all the methods we just talked about.But the return type is not a bullion. It's a returnsomething is -- Is. -- like the property is the type. So there I've never There's nothing else in TypeScript like that. You're always returninga string, a number of bullion, a custom type, an interface. But in this case, you say,I amspecifically making this a type guard by saying, in my case, the food argumentthat is passed to the function is sandwich.And that willtell TypeScript this is a type garden is good enough to check for what I want. Interesting that I've I've never\n\n15:04 Scott Tolinski:\never done that before.\n\n15:06 Wes Bos:\nAnd this is my honestly, my first time seeing this as a strategy. I've just never had to reach for this, but I think this is really neat. I was looking into it, and like, why not just put an if statement inside the inside your function. Right? That's what I usually do, and that's good enough. But I guessThe the idea behind it, I saw, was that some people were saying, you shouldn't be putting that logic in your function because that is not what your function does.So it's better to move it out into its own function, which I can see. And then also, it's it's more reusable. If you have a much more complex type guard,it's not a good idea to replicate that check 3 or 4 time. In my case, it's almost always a 1 liner who cares. Right? But it's nice to stick it in a separate function, I guess. It seems like it's the classic\n\n15:53 Scott Tolinski:\nabstract away sweep under the the -- Yeah. -- ugly stuff underneath the rug. Right? You have all these ugly if checks. You can just sweep it into a singular function that does the the check for you. I think that the syntax is the blank is food is sandwich as the return type is is really interesting as well.Yeah.Now, I also saw a type narrowing with this is. Have you have you seen that, West?Oh, I don't think so. This is. Yeah. So Yeah. This is an interesting 1 where you can use this is typewhere you're basically definingthe type of this.So you can specify this is type in the return position for methods in for methods in classes and interfaces.When mixed with type narrowing,the type of the target object would be narrowed to the specified type. So you're basically saying inside of the constructor,this istype. It's so funny to say Okay. It goes inside a constructor.\n\n16:56 Wes Bos:\nCorrect. Okay. Okay. That makes sense because it's if it's if it's being bound to that. Interesting.Especially if it's, like, being extended. Yeah. See, b and 00P.It's not something that I do a whole lot of. I I bet where that is handy is if you have a base TypeScript food,and then you havesomething that is extending it and you you run super and then superwill run the original constructor first before you go ahead and and finish your your constructor of the extended type. I wonder if it's as handy in those use cases.Yeah. To tweet us at syntax of m if you know because I again, I'm not a big object oriented programmer, so it's definitely\n\n17:37 Scott Tolinski:\nnot 1 of those areas. I've touched Yeah. It's 1 of those things that I see in the docs here and I say that's neat.And then I never run into that issue in my code. So maybe there will be someday when I'm actually writing object oriented programming where the perfect opportunity to use this is will come up and I'll I'll rejoice. But So far, I have not used it myself personally. I would love to see some real practical examples of it. Next 1 is this is kinda in the same area of type narrowing type guards. It's this thing called discriminating\n\n18:06 Wes Bos:\nunions. So often, a union is basically a list of types where it could be this, or it could be this, or it could be this. And often, within those let's say you have 3 TypeScript,often within Or let's go back to my sandwich or pizza example. Right? Sandwich or pizza, they both have their own properties. Like, a pizza would have toppings anda sandwich would have bread type,but they also will share things likelike a a best before date is is the example that I've used. Right? You were so good with these food metaphors.Right? So, if you A discriminating Union is thatyou are passingin a value of food, and youhave to checkon thosethose fields that are different from each other. Right? Like you say, okay, the exam the TypeScript docs is really good as well, is network state. Your network can either be loading, it could be failed, or it could be success.And the network state will have3 differentpossible states,and the network state will sharepossible state values but then they will not share things like a successful responseor an error will be will be different. Right? And being able to check for those valuesinside of your functionis important.\n\n19:28 Scott Tolinski:\nOtherwise, TypeScript is gonna yell at you again. Yeah. TypeScript frequently likes to yell at you and that is 1 of the things that, like, kind of turns people off of TypeScript occasionally. Right? Because it's yelling at you so much. But I do think being able to control types from type narrowingusing many of these techniques that we talked about in this episode is like 1 of the key ways that you go from being like.TypeScript is controlling my life too. I'm controlling TypeScript.\n\n19:55 Wes Bos:\nYeah. I I found and I I think I still find this, but especially when I started TypeScript,it was just likelike it's making you and it's not that TypeScript is is beingannoying.Yeah. Well, it is it is annoying, but it's it's doing it becausethere's a possibility that you could goof this up or there's a possibility that somebody passes. The very basic example that we didn't cover here is that it's possible that this thing is going to be undefined.And if you do not handle the case for this thing being undefined,then at some point you're gonna have a bad day, and your application's gonna crash or you're you're gonna send out an email that has undefined in it. Like, myI I popped open something on my Google Google Home the other day and just said undefined. And I was like, that's a case. They did not properly account for that being undefined. Yeah. And and it should go to to say, you know, especially if you're new to TypeScript here. There are many times when it can feel like\n\n20:55 Scott Tolinski:\nTypeScriptis wrong, you're like, I've done everything I need to do here. TypeScript is wrong. And I'm gonna tell you straight up if that'snever the case. It's always something that you have done. And it's always a an issue with the the types that you're narrowing or attempting to narrow. So if you are getting some of these errors and you can't figure it out,It's 1 of thosecore problems I think when you get into TypeScript is learning how tofind andjust squish these types of issues in TypeScript because it is. Even though, like you said, it it is, you know, is yelling at you. It's at the end of the day, it is, you know, trying to save your butt. Or even even saying, like,\n\n21:33 Wes Bos:\nam I approaching this wrong? Unfortunately,you know? Like, am I doing this wrong? Am Ilike, I I find it really helpful to talk to people who have have hit that possible issue, and the the question is not, how do I fix this, ismaybe do I need to step back 1 stepbehind that and and reshape how I wrote my types? Oror just like how I wrote this function, you know. Is TypeScript wrong? No. You are wrong.It's not me, is it?It might be. It's always cool. Yeah. I think that's it for me. Anything else to add here? No. I don't think so. Yeah. I think this is this nails it. Cool. Alright. Thanks for tuning in. Get you on Wednesday.Peace. Peace.\n\n22:19 Scott Tolinski:\nHead on over to syntax dot f m for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.\n\n22:32 Wes Bos:\nMyname is Wes, My dog eats food on the moon.\n\n22:43 Scott Tolinski:\nMy name is Scott,Please buy some purple cheese before meeting my brother.\n"
      }
    ]
  },
  "output": {
    "id": "chatcmpl-7FPgBS99J3o3K6XQK76BIgpFbkjHF",
    "object": "chat.completion",
    "created": 1683907987,
    "model": "gpt-4-0314",
    "usage": {
      "prompt_tokens": 5710,
      "completion_tokens": 410,
      "total_tokens": 6120
    },
    "choices": [
      {
        "message": {
          "role": "assistant",
          "content": "{\n  \"title\": \"TypeScript Fundamentals: Narrowing, Discriminating Unions, and Type Guards\",\n  \"description\": \"Explore the concepts of type narrowing, discriminating unions, and type guards in TypeScript, helping you solve common TypeScript errors.\",\n  \"summary\": [\n    {\"time\": \"01:10\", \"text\": \"Introduction to TypeScript fundamentals\"},\n    {\"time\": \"06:35\", \"text\": \"Type narrowing explained\"},\n    {\"time\": \"10:19\", \"text\": \"Different ways to type guard\"},\n    {\"time\": \"15:53\", \"text\": \"Discriminating unions\"},\n    {\"time\": \"19:55\", \"text\": \"Dealing with TypeScript yelling at you\"}\n  ],\n  \"tweets\": [\n    \"Master the art of TypeScript fundamentals, as we dive into type narrowing, discriminating unions, and type guards!\",\n    \"Discover how to wield TypeScript like a pro by overcoming its common errors using type narrowing and discriminating unions. Tune in now!\"\n  ],\n  \"listener_tweets\": [\n    \"This TypeScript fundamentals episode on Narrowing, Discriminating Unions, and Type Guards is a game-changer!\",\n    \"Just learned so much about type narrowing and discriminating unions in TypeScript thanks to this awesome podcast episode!\"\n  ],\n  \"topics\": [\"TypeScript\", \"Type Narrowing\", \"Discriminating Unions\", \"Type Guards\"],\n  \"links\": [\n    {\"name\": \"Syntax.fm\", \"url\": \"https://syntax.fm\"}\n  ],\n  \"speaker_times\": [\n    {\"name\": \"Wes Bos\", \"time\": \"10:42\"},\n    {\"name\": \"Scott Tolinski\", \"time\": \"12:00\"}\n  ],\n  \"sentiment_analysis\": [\n    {\"topic\": \"TypeScript\", \"speaker\": \"Wes Bos\", \"sentiment\": \"positive\"},\n    {\"topic\": \"TypeScript\", \"speaker\": \"Scott Tolinski\", \"sentiment\": \"positive\"}\n  ]\n}"
        },
        "finish_reason": "stop",
        "index": 0
      }
    ]
  }
}