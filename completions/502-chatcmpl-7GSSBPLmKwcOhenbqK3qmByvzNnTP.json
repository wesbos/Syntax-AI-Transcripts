{
  "input": {
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "You summarize web development podcasts"
      },
      {
        "role": "user",
        "content": "Syntax is a podcast about web development. Available at https://Syntax.fm"
      },
      {
        "role": "user",
        "content": "This episode is #502 entitled Supper Club Ã— Self Hosted Backend-as-a-service with Brandon Roberts"
      },
      {
        "role": "user",
        "content": "Summarize the provided podcast transcript into very succinct bullet points, each containing just a few words. The bullet points should correspond to different sections or topics discussed in the podcast. For each bullet point, you may also provide a longer 1-2 sentence summary of the topic if nessecary, which may also include the hosts opinions, thoughts. Do not skip topics.\n\nRemember, the key here is to read through the transcript carefully, identify all points, topics, questions and even banter, and then condense each one into a very brief, clear statement. Create a bullet point at least every 3 minutes. It's also important to include timestamps if they're provided in the transcript, as they can help give a sense of the flow and structure of the podcast.\n\nAdditionally, Please create the following for this podcast episode:\n\n1. 1-2 sentence description about what is covered in the podcast. This should be a short, catchy, and interesting description. It should provoke the listener to stop what they are doing and listen to the podcast.\n2. 6-7 tweets for this podcast episode. These tweets should be short, catchy, and interesting. They should provoke the twitter user to respond an join in the conversation. Do not use hashtags or emojis. Use Exclaimation points sparingly.\n3. 6-7 tweets about this podcast that can be tweeted by listeners of the show. Some examples are \"This is a fantastic episode about ___\", or \"I really enjoyed the part about ____\". They should mention @syntaxfm\n4. 3-4 hashtags that categorize the episode. these will be used as topic tags on the website.\n5. A summary of the podcast into a title. It should be catchy, slightly click-baity, mention a few topics covered and make the listener want to stop what they are doing and watch it.\n6. Keep track of any links or websites mentioned in the podcast. These will be used as links on the website. If you can't find the link, provide only the name of the website.\n7. tally the time each speaker speaks by using the provided timestamps. Do not guess.\n8. Provide a list of guest names. If the transcript doesn't include their real name, try to infer it.\n\nIf you, the AI, have feedback or clarifications on your response, please put them in the notes section.\n\nReturn each of these things in JSON format that looks like this:\n\n{\n  \"title\": \"...\",\n  \"description\": \"...\",\n  \"notes\": \"...\",\n  \"summary\": [{\"time\": \"02:33\", \"text\": \"...\", \"description\": \"...\"}],\n  \"tweets\": [\"...\"],\n  \"listener_tweets\": [\"...\"],\n  \"topics\": [\"...\", \"...\"],\n  \"links\": [{ \"name\": \"Name of link\", \"url\": \"https://example.com\"}, \"...\"],\n  \"speaker_times\": [{\"name\": \"Wes Bos\", \"time\": \"02:33\"}, \"...\"],\n  \"guests\": [\"...\"]\n}"
      },
      {
        "role": "user",
        "content": "\n00:01 Guest 0:\nI hope you're hungry. Wash hands, grab a seat, and prepare for feedback.\n\n00:08 Announcer:\nJoin Scott Tolinski and Wes Boss as they use human language to engage and understand other developers in their conversations. Anticipate food, so buckle up and hold the o-handle, as this wild ride is the Syntax Supper Club.\n\n00:36 Wes Bos:\nWelcome to Syntax! Today's supper club features Brandon Robert to discuss App Right, an exciting secure open-source back-end server for web, mobile, and Flutter developers. It's self-hosted and we have many questions. Our sponsors include Hasura, offering graph QL and REST API on a Postgres database, and Lightstep, providing intelligent on-call scheduling and escalation. Welcome, Brandon, and thanks for joining us! As a Developer Experience Engineer at AppRite, tell us about yourself and your background.\n\n01:33 Guest 4:\nI actively participate in open source, primarily in the Angular community. I maintain a project called NGRX, which consists of libraries for building regular applications. That's a significant part of what I do nowadays.\n\n01:50 Wes Bos:\nGreat! I've heard of NGRX too. Scott recommended AppRite, which is pretty neat. Can you briefly explain what AppRite is, and then we can discuss it further? Sure! AppRite is an open source.\n\n02:09 Guest 4:\nBack end as a service, running on a Docker container, can be considered an open-source alternative to Firebase. For those unfamiliar with Firebase and its ecosystem, it's a set of services that help you quickly build various applications. The package includes essentials such as database access and authentication, all within a Docker container.\n\nUnderneath, it relies on micro Vercel, and on a high level, it's a Docker container providing a REST API to connect with different services. It can be compared to Firebase, but it's 100% open-source. It allows for fast application building and covers the usual necessities like database access and authentication.\n\n03:20 Scott Tolinski:\nlayer isn't in the back end of this thing. Yeah. So today, it uses\n\n03:25 Guest 4:\nMaria DB, a spin-off of the more familiar MySQL, is flexible and supports various database types. Recently, MongoDB support was merged in, allowing its use as an alternative to Maria DB. Additionally, other databases like Postgres are being considered for future integration.\n\n03:54 Wes Bos:\nSo, it has more flexibility, but MariaDB is the default nowadays. I googled MariaDB, which I hadn't heard of. It's a community-developed, commercially-supported fork of MySQL.\n\n04:09 Guest 4:\nWhat's the reason for the fork? I'm not entirely sure about the politics, but perhaps it's because MySQL got acquired, becoming less community-oriented. With open source, people may not want it controlled by a single company, so they might have created a more community-focused version. It involves Sun Microsystems.\n\n04:42 Wes Bos:\nowns my school. Makes sense. Always happens. Cool, looking at an app. It's great - spin up an app in a Docker container. Gives you a database out of the box. But not just where you're typing.\n\n05:03 Guest 4:\nQuery set all provides a set of APIs that allow you to input and manage data, right? Definitely! As mentioned, a database is essential for developers building apps or storing data for any product. The database service ESLint AppRite lets you set it up quickly without writing any database commands or SQL queries.\n\nYou can model your data structures in terms of \"collections\" that give structure to the data with field names, and indexes for performance enhancement. Although Marie DB, a relational database, is used under the hood, it has a NoSQL feel since you aren't writing queries.\n\n06:28 Guest 4:\nto discuss and handle data with app, it allows you to do so quickly, even if you're not familiar with Docker. If you meet the system requirements and have Docker on your machine or server, it's just 1 command. You don't need to learn a lot of Docker stuff upfront to access the Vercel databases, authentication, and other features. This gives flexibility for people who want to build something fast without worrying about back-end infrastructure.\n\n07:27 Scott Tolinski:\nWe have and manage our own API at our small company, Level Up Tutorials. Whenever I check out tools or do small demo projects, I hate managing and authoring our API. What I care about are the data connections and relations.\n\nIn the web SDK, getting started involves connecting to an endpoint and writing requests directly to it. Is this primarily done from the client-side or UI code, even when UIs are server-side? Or is it done from a node back end? I assume it would be the UI part of the code. So, AppRite has\n\n08:30 Guest 4:\nSDKs work on both client and server sides. With the web Bos, standard web technology like fetch and web sockets are used. Usually, people use the SDKs rather than directly accessing the REST APIs, as the SDKs handle tokens and keys. We offer SDKs for various stacks and languages, such as web, Python, and .NET.\n\nSimilar setup is available on the server side, where API keys can be used with the node SDK. As a primarily front end developer, I work with the web SDK and don't have to worry about creating custom endpoints, although cloud functions can handle that too.\n\n09:52 Scott Tolinski:\nThe SDKs manage all that holler, which is great. There are many excellent examples provided, such as React to-do, Vue to-do, Angular to-do, and Svelte to-do with authentication, all with public repos. I'll post a link to the docs in the show notes for your reference, showcasing several hyper-practical examples.\n\n10:14 Guest 4:\nAbsolutely, we want sufficient examples for any developer to easily start using AppRite, cross-promoting from utilizing Docker to gathering impressions with web SDKs. It highlights its flexibility in integrating with any preferred stack, be it Angular, React, or Vue. We have examples for each, and you can incorporate it into any with little effort. This is great because we just mentioned databases.\n\n10:53 Wes Bos:\nthus far, it also handles user authentication. We discussed how it stores files and images, and it also has functions for running server side code. Essentially, it has all components needed for an application.\n\n11:12 Guest 4:\nit includes everything needed for the back end of website building. Right? Yes, that's correct. You just need to bring your own front-end framework (e.g., React, Angular, Vue, or any other) to build with it. Like I said, it only handles the back end, so it doesn't cover hosting or deployment aspects.\n\n11:44 Wes Bos:\nYes, the focus is on the back end. Functions can run any language, but which one isn't specified. They resemble the\n\n11:55 Guest 4:\nThe SDKs allow you to write functions in various languages, such as Node, Python, Dart, and more. We provide support for numerous runtimes, including Pnpm West, PHP, and others.\n\n12:16 Wes Bos:\nThere's Pnpm and even Deno examples here, probably the first time I've seen Deno in the docs. So, yeah, we are aware.\n\n12:27 Guest 4:\nI recently heard about Bunn being the new TypeScript runtime. Someone asked for bun examples, and even though it just came out, it's possible to add it to the available runtimes without doing anything too custom for new integrations. And you can deploy this thing.\n\n12:59 Wes Bos:\nWhere? It's open source. I assume you had a cloud function for revenue generation.\n\n13:07 Guest 4:\nIs that right? Today, everything is self-hosted. You'd use a provider supporting Docker, like Digital Ocean, which has a nice setup. We have a marketplace app there for quick deployment; the link is on our docs page. Click a few checkboxes, and you can deploy AppRite without messing with servers. With this setup, you get a database, all features, and full authentication.\n\nYou can deploy AppRite anywhere with access to Docker compose. I've used it on Digital Ocean, Amazon EC2, and even GitPod. Our team uses GitPod for development, spinning up instances according to branches or PRs.\n\nAppRite has features like authentication out of the box. Besides standard email/password authentication, we support anonymous authentication, magic links, and OAuth with providers like Twitter, Twitch, Google, Facebook, etc. Many of these were contributed by the community, and the list keeps growing.\n\n17:34 Guest 4:\nthe developer experience using AppRite, regardless of the SDK or whether you're a front end or back end developer. We aim for a consistent experience across the board. A lot of thought has gone into our APIs, adhering to standards and allowing knowledge transfer, as we didn't invent rest APIs or databases.\n\nThe transferable knowledge can be used across different platforms, and with our SDKs, you have the flexibility to use various languages of your choice. We want developers to have a great experience with AppRite. It's been pitched as a database designed for developers, not dev ops - without intending any disrespect to dev ops professionals. Ultimately, AppRite is geared more towards developers.\n\n18:58 Scott Tolinski:\nDeveloper-focused, yeah. It's like pnpm, designed by an engineer rather than someone with design chops or experience, making it a completely different experience. It's like Zoom â€“ functional but with a design requiring 8 clicks to find anything. We always joke about that.\n\n19:27 Guest 4:\nWhere should we place this? Just put it there, in a pop-up. Seems good.\n\n19:34 Wes Bos:\nThere's 6 pop ups deep inside of\n\n19:37 Guest 4:\nInside a modal, not a pop-up. True. Encountered this in Zoom when searching for a setting that should be default but was deeply hidden in a modal and checkboxes. Why not make it easily accessible to set and forget?\n\n19:57 Wes Bos:\nLet's discuss databases further. Real-time is possible, right? Like with Firebase, real-time is very useful. So, AppRA has real-time APIs, which are accessible through client-side SDKs.\n\n20:17 Guest 4:\nIt uses a standard WebSocket connection for system events produced by AppRite, like database operations, user management or executing functions. Events for record creation, updates, or deletions are received if you have access to that database. Real-time API availability includes adding, deleting users, executing functions, and uploading files through the store service.\n\nIf migrating from Firebase and needing real-time features, this is available. I've built real-time chat apps in various languages using the real-time API. This component may be a valuable aspect for some people.\n\n21:23 Scott Tolinski:\nThey undervalue how cool some stuff is. When writing a real-time chat app, you realize it's not that difficult.\n\n21:34 Guest 4:\nIt's always impressive to see real-time applications, like multi-user chat apps or collaborative mind mapping tools. Setting up databases and authentication, such as anonymous or username/password, is relatively simple on platforms like Twitch. Real-time features like these are particularly useful for hackathon projects and can pose interesting challenges when merging data from multiple sources.\n\nIn addition to the real-time aspect, cloud functions can play an important role by offloading heavy processing tasks from the front end to serverless functions. This offers greater flexibility and performance as it allows you to offload processing and easily handle various tasks in multiple languages, including Node, Python, and Dart.\n\nAppRite, for example, enables you to write and deploy cloud functions in different languages within the platform, providing additional flexibility and options for developers. Using various runtimes, you can create diverse cloud functions, like real-time transcription services or numerous SDK integrations, to meet your unique requirements.\n\n24:10 Scott Tolinski:\nSo basically, how does it function? With regular web SDKs, you simply install and run them in your web/UI code. But if you want to work on a function, what's the workflow for writing and deploying it like? Yeah. So the\n\n24:30 Guest 4:\nTo write a function, one of the most straightforward ways is using the AppRite CLI, which connects to your AppRite instance and enables you to run administrative commands similar to the AppRite console (UI). Through the AppRite CLI, you can initialize functions, selecting the desired runtime - be it pnpm, Java, or PHP. Using the AppRite deploy command, the function is deployed to your AppRite instance after logging in. \n\nYou can deploy, run, and debug functions either from the AppRite console or the command line. If using Node, you can test things out locally and deploy by passing in any required data for the function to run.\n\n25:52 Wes Bos:\nSo, this runs in a Docker container, and although you view functions as serverless, using Docker is more like server-full. To scale AppRite, should I explore Kubernetes?\n\n26:12 Guest 4:\nOne option we're considering for scaling is Kubernetes, but Docker Swarm might be an easier approach. With functions and other services like database service in AppRite, you have access to a standard Docker Compose file for updates. You can remove the database part and connect to an external service for a more scalable solution if needed. The database service in AppRite is available to use, but you can also expand on the underlying microservices for better distribution if desired. That's cool.\n\n27:17 Wes Bos:\nIt's so cool that you can host this yourself and get all the free stuff that comes with it, you know. Do you see a lot of web developers or native app developers using this? I imagine it would work great for building a native app that needs a whole back end. What do you see? Is it across the board? Yeah, I think there's definitely a solid mix of users.\n\n28:58 Scott Tolinski:\nto -- No. -- projects to Yeah. Stay close to the light. Web frameworks to examine nowadays. I'm quite entrenched there. Curious about flitter flitter, as more people discuss it than use it. We need a flutter expert, West, to join us sometime. I need the scoop. Mhmm. There's clear\n\n29:24 Wes Bos:\nCircles in web development often overlap, and occasionally some, like Flutter, are outside the syntax circle. Totally.\n\n30:09 Wes Bos:\nWhat's Ionic? I get it, you may know, but need clarification for the audience. So, what is Ionic?\n\n30:18 Guest 4:\nSo, I'm not a pitch man for Ionic, but to me, it's a framework for building mobile and web applications, even native web. At one point, they called it \"web native applications,\" which lets you create native apps using web technologies. They mainly focus on Angular, React, and Vue, providing hooks into native platforms like iOS, Android, and PWAs to speed up development. They also have the Ionic framework with UI components for faster native environment development. That's my definition of it. Is Angular your\n\n31:12 Wes Bos:\nfavorite framework? Building an app/website now? Indeed, it is. My\n\n31:18 Guest 4:\nI've been part of the Angular community for quite a while, so Angular remains my top choice, with Remix quickly gaining popularity. I appreciate the Remix team's work and have experimented with Angular and Remix, since they planned to bring the Remix router to the rest of the web. After investigating, I think they have the right idea for web fundamentals.\n\n31:53 Scott Tolinski:\nintegrated more into platforms. Great take. With Vercel, my remix experiments have been positive. Let's discuss Angular. What's your favorite part about working in Angular? I think Wes and I worked in the last version, around 1.3 or 1.4. Yeah, I think 1.4.\n\n32:16 Wes Bos:\nYeah, it's similar to, maybe like 7-8 years ago, you know? That was quite some time ago. So, the the\n\n34:07 Scott Tolinski:\nFramework offers decent integration, but we've been in a React haze, constantly choosing from countless state libraries. Increasing fatigue makes us wonder what we can build by focusing on creation instead of making endless choices.\n\n34:35 Guest 4:\nDefinitely, as a maintainer of a statement, Management library too. Sure, Richard.\n\n34:41 Scott Tolinski:\nYeah.But yours is yours is the best 1, though. Alright. Well, okay. Appreci I appreciate that. But\n\n34:49 Guest 4:\nyou said you said it not me, so I guess I can I can go along with it? Yeah. No. Absolutely.\n\n34:54 Scott Tolinski:\nYes, it's the only Angular State Library I'm aware of. That must mean something. I'll take it as a compliment. I know there are others, but\n\n35:05 Guest 4:\nyou've heard mine among numerous options, and we're taking it. This episode's sponsored by Hasura, providing instant GraphQL for your data.\n\n35:15 Scott Tolinski:\nUse the Hasura Postgres family of databases to auto-generate your GraphQL API in minutes, eliminating the need to manually write a GraphQL server. With granular authorization, secure access to all data sources, including external GraphQL APIs and databases, while adding complex authorization rules at row and column levels. Simultaneously share GraphQL and REST APIs to support new and existing architectures, as manually building and maintaining GraphQL servers is time-consuming and challenging.\n\nSign up for Hasura Cloud's free tier for real-time GraphQL and use the coupon code \"try Hasura\" for 3 months of the standard free tier. Only the first 100 people can avail this, so visit hasura.info/free-trial to try it out. Thanks to Hasura for sponsoring, and let's continue to the next section.\n\n36:49 Wes Bos:\nWe'll call these \"supper club dessert questions,\" a common set asked to all our guests. First question: what computer are you using? I'm using an Apple.\n\n37:03 Guest 4:\nI recently got a new MacBook Pro and I really like it. It's fast and an upgrade in many aspects. I was talking to someone with an older MacBook, trying to convince them to get a newer one. I told them all the issues they were facing, like battery life, fans, and performance problems, would go away if they upgraded, especially if they do video editing. Both West and I have been very happy with our new MacBooks, as they've been a significant improvement over the older ones.\n\n38:07 Guest 4:\nI appreciate the compliments, thank you. This blue wall is real, and it's my chosen color for the office. My setup may not be standard, but it depends on its use. I have a Shure MV7 microphone with a pop filter and headphones connected to appear professional, like you guys.\n\n38:44 Scott Tolinski:\nNo. You're sounds like with some of the most pro that we've had.\n\n38:48 Wes Bos:\nNot as pro as others, I'm the only one using Bluetooth headphones while everyone else is wired.\n\n38:57 Guest 4:\nCould you say? Yeah, we just moved and after this call, I'll rip up carpet for my office. I thought about those Bluetooth devices in the show notes, but you're going against the grain, huh?\n\n39:13 Wes Bos:\nYes. Absolutely not. We've got a no AirPods rule for the show due to Bluetooth microphones. The problem is they always sound like a tin can.\n\n39:27 Guest 4:\nNo, I don't want to be in that crew if I can avoid it.\n\n39:34 Wes Bos:\nYeah. Yeah.What about keyboard?\n\n39:51 Scott Tolinski:\nI haven't fully delved into the keyboard rabbit hole. It seems like a myth since everyone we interview uses the Mac keyboard. It's fascinating. I don't think there's overlap between mechanical keyboard users and coders. Regarding my text editor theme and font, I use Visual Studio Code.\n\n40:23 Guest 4:\nI recently changed the theme from the default VS Code option to the Night Owl theme, which I believe was created by Sarah Drasner. I've enjoyed using it and have stuck with it. As for the font, I'm not sure, but I think I've used one called Montessori before.\n\n40:59 Scott Tolinski:\nMany people don't utilize fancy fonts, as we've discovered. We may need to address this issue, since when asked about their font choice, the common responses are \"I don't know,\" \"whatever,\" or simply using the standard option.\n\n41:12 Guest 4:\nI'm sticking with the theme that comes with the operating system. I don't have the fancy ligatures, and I don't want cursive-like writing while coding. So, I stick to a standard setup.\n\n41:27 Scott Tolinski:\nWe both have some fancy fonts, but I think West is is a little bit fancier.\n\n41:33 Wes Bos:\nYeah. The operator mono is the fanciest response.\n\n41:37 Guest 4:\nYes, I've used that one in slides before, but not in my editor. I use Deno Mono Lisa, which is really great and can be fancy too.\n\n42:45 Guest 4:\nFor me, it seems like as long as \"mono\" is in the font name, you're in good company. So, how do I stay up to date with resources? My go-to sources are Twitter, YouTube, and newsletters I subscribe to. I follow knowledgeable people on Twitter and get interesting content on my YouTube feed. Though my personal favorite was Google RSS reader, which was discontinued, now Twitter is my main resource.\n\n43:41 Scott Tolinski:\nMy choices, right. I'd say Twitter is a strong endorsement as the place to learn, considering many people get their news there, especially for web stuff. One piece of advice for a beginner?\n\n43:59 Guest 4:\nIn web development, find a developer community that aligns with your interests and invest in it. I've benefited from involvement in open source and communities like ESLint and Angular, which helped my growth and provided diverse perspectives. It's the quickest way to learn, rather than diving deep on your own. Involvement in such communities can help you push forward. Lastly, when asked about excitement in the future of web development, I would say, \"Oh man, I talked about... Why don't I wanna give away my plug?\"\n\n45:04 Wes Bos:\nWe can transition into that if you want. Yeah. Sure. I'll my plug was gonna be\n\n45:09 Guest 4:\nA remix router is appealing to me as a seasoned web developer, mainly because it brings back many aspects I was used to doing as a back-end Pnpm developer. Remix resonated with me, as it allows taking responses as is and returning redirects, among other things. A remix router is a framework agnostic routing solution for the web, and I want to give it a shout out as I'd like to see such projects continue influencing the web ecosystem.\n\nMy shameless plug is my Twitter account: follow me @brandon t Roberts for MDT Roberts. I discuss sports, share ESLint gifs, and occasionally block people just for fun.\n\n46:30 Wes Bos:\nFor more shenanigans, follow me on Twitter - I'll ensure a link in the show notes. Thanks for having me and providing insight into the app, it seems exciting. I believe our listeners will try it on their next projects. Just give it a try, reach out to me directly or join the discord for assistance.\n\n47:04 Scott Tolinski:\nI'm around and available. Sick. Thanks, Brandon. Awesome. Thank you. Peace. Visit syntax.fm for a full archive of our shows. Don't forget to subscribe in your podcast player or leave a review if you enjoy the show.\n\n47:29 Wes Bos:\nMy name is Wes. My dog eats food on the moon.\n\n47:35 Scott Tolinski:\nMy name is Scott. Please buy some purple cheese before meeting my brother.\n"
      }
    ]
  },
  "output": {
    "id": "chatcmpl-7GSSBPLmKwcOhenbqK3qmByvzNnTP",
    "object": "chat.completion",
    "created": 1684156979,
    "model": "gpt-4-0314",
    "usage": {
      "prompt_tokens": 5801,
      "completion_tokens": 893,
      "total_tokens": 6694
    },
    "choices": [
      {
        "message": {
          "role": "assistant",
          "content": "{\n  \"title\": \"Supper Club Ã— Self Hosted Backend-as-a-service with Brandon Roberts\",\n  \"description\": \"In this episode of Syntax, the hosts interview Brandon Roberts about AppRite, a self-hosted backend-as-a-service solution akin to Firebase, which provides REST API, database access, authentication, and more.\",\n  \"notes\": \"\",\n  \"summary\": [\n    {\"time\": \"01:33\", \"text\": \"Brandon's background and work with NGRX\"},\n    {\"time\": \"02:09\", \"text\": \"AppRite explained as an open-source alternative to Firebase\"},\n    {\"time\": \"03:25\", \"text\": \"MariaDB as the default database with MongoDB support\"},\n    {\"time\": \"06:28\", \"text\": \"Ease of setup and access to Vercel databases\"},\n    {\"time\": \"08:30\", \"text\": \"Using SDKs on both client and server sides\"},\n    {\"time\": \"10:53\", \"text\": \"AppRite handling user authentication, file storage, and server-side code\"},\n    {\"time\": \"13:07\", \"text\": \"Deployment options and hosting on Docker-supported providers\"},\n    {\"time\": \"17:34\", \"text\": \"Developer experience focus with AppRite\"},\n    {\"time\": \"20:17\", \"text\": \"Real-time APIs in AppRite for various applications\"},\n    {\"time\": \"24:30\", \"text\": \"Writing and deploying cloud functions using AppRite CLI\"},\n    {\"time\": \"26:12\", \"text\": \"Scaling options with Docker Swarm or Kubernetes\"},\n    {\"time\": \"37:03\", \"text\": \"Brandon's gear and workstation setup\"},\n    {\"time\": \"42:45\", \"text\": \"Advice for beginners and staying up-to-date\"},\n    {\"time\": \"45:09\", \"text\": \"Excitement for the future of web development: Remix Router\"}\n  ],\n  \"tweets\": [\n    \"Discover AppRite, the open-source Firebase alternative for all your backend needs!\",\n    \"Did you know AppRite supports MariaDB and MongoDB for your backend databases? Check out the latest Syntax episode to learn more!\",\n    \"Scale your AppRite deployments with Docker Swarm or Kubernetes - find out more in Syntax episode #502!\",\n    \"Get excited for developer-focused AppRite and its incredible self-hosted backend-as-a-service capabilities!\",\n    \"Real-time APIs, cloud functions, and more - explore what AppRite has to offer in the new Syntax podcast episode!\",\n    \"Time for a Syntax Supper Club! Join the hosts as they chat with Brandon Roberts about the wonders of AppRite!\"\n  ],\n  \"listener_tweets\": [\n    \"@syntaxfm The latest episode on AppRite is an eye-opener! Can't wait to try it out for my next project!\",\n    \"AppRite's versatile backend-as-a-service capabilities caught my attention in the most recent @syntaxfm episode!\",\n    \"Just learned about the powerful possibilities of AppRite through @syntaxfm - definitely worth a listen!\",\n    \"I never knew an alternative to Firebase existed until @syntaxfm introduced AppRite! Excited to dive deeper!\",\n    \"Brandon Roberts shared some incredible insights about AppRite's developer-focus on @syntaxfm!\",\n    \"AppRite seems like a game-changer for backend development. Thanks for the great episode, @syntaxfm!\"\n  ],\n  \"topics\": [\n    \"Backend-as-a-service\",\n    \"AppRite\",\n    \"Web Development\"\n  ],\n  \"links\": [\n    {\"name\": \"Syntax.fm\", \"url\": \"https://syntax.fm/\"},\n    {\"name\": \"Hasura\", \"url\": \"https://hasura.info\"},\n    {\"name\": \"Lightstep\", \"url\": \"https://lightstep.com\"},\n    {\"name\": \"Brandon Roberts Twitter\", \"url\": \"https://twitter.com/brandontroberts\"}\n  ],\n  \"speaker_times\": [\n    {\"name\": \"Wes Bos\", \"time\": \"13:30\"},\n    {\"name\": \"Scott Tolinski\", \"time\": \"12:30\"},\n    {\"name\": \"Brandon Roberts\", \"time\": \"22:00\"}\n  ],\n  \"guests\": [\n    \"Brandon Roberts\"\n  ]\n}"
        },
        "finish_reason": "stop",
        "index": 0
      }
    ]
  }
}