{
  "input": {
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "You summarize web development podcasts"
      },
      {
        "role": "user",
        "content": "Syntax is a podcast about web development. Available at https://Syntax.fm"
      },
      {
        "role": "user",
        "content": "This episode is #405 entitled Hasty Treat - Next.js 12"
      },
      {
        "role": "user",
        "content": "\nSummarize the provided podcast transcript into very succinct bullet points, each containing just a few words. The bullet points should correspond to different sections or topics discussed in the podcast. For each bullet point also provide a longer 1-2 sentence summary of the topic, which may also include the hosts opinions, thoughts.\n\nRemember, the key here is to read through the transcript carefully, identify the main points or topics, and then condense each one into a very brief, clear statement. It's also important to include timestamps if they're provided in the transcript, as they can help give a sense of the flow and structure of the podcast.\n\nAdditionally, Please create the following for this podcast episode:\n\n1. 1-2 sentence description about what is covered in the podcast. This should be a short, catchy, and interesting description. It should provoke the listener to stop what they are doing and listen to the podcast.\n1. 6-7 tweets for this podcast episode. These tweets should be short, catchy, and interesting. They should provoke the twitter user to respond an join in the conversation. Don't use any hash tags or emojis.Use Exclaimation points sparingly.\n2. 6-7 tweets about this podcast that can be tweeted by listeners of the show. Some examples are \"This is a fantastic episode about ___\", or \"I really enjoyed the part about ____\"\n3. 3-4 hashtags that categorize the episode. these will be used as topic tags on the website.\n4. A summary of the podcast into a title. It should be catchy, slightly click-baity, mention a few topics covered and make the listener want to stop what they are doing and watch it.\n5. Keep track of any links or websites mentioned in the podcast. These will be used as links on the website. If you can't find the link, provide only the name of the website.\n6. tally the time each speaker speaks. This will be used to create a pie chart of who speaks the most.\n9. Provide a list of guest names. If the transcript doesn't include their real name, try to infer it.\n9. Provide a prompt for Mid Journey. For example a show about accepting money online, would be simple vector. visualization of accepting money online, in the style of Netflix movie cover, golden yellow background. black and white , monochrome. painted illustrations, grainy. --v 5 --ar 16:9\n\nYou may exclude transcripts from the Announcer and ad-reads from sponsors, unless the sponsor is Sentry.\n\nReturn each of these things in JSON format that looks like this:\n\n{\n  \"title\": \"...\",\n  description: \"...\",\n  \"summary\": [{time: \"02:33\", text: \"...\", description: \"...\"}],\n  \"tweets: [\"...\"],\n  \"listener_tweets\": [\"...\"],\n  topics: [\"...\", \"...\"],\n  links: [{ name: \"Name of link\", url: \"https://example.com\"}, \"...\"],\n  speaker_times: [{name: \"Wes Bos\", time: \"02:33\"}, \"...\"],\n  mid_journey_prompt: \"...\"\n  guests: [\"...\"]\n}"
      },
      {
        "role": "user",
        "content": "\n00:00 Announcer:\nMonday. Monday. Monday. Open wide dev fans. Get ready to stuff your face. With JavaScript, CSS, node module, barbecue tips, jet workflows, break dancing, soft skills, web development, the hastyest, the craziest, the taste, the taste, the taste webb developmenttreats. Coming in hot. Here is west. Barracuda,Bos, and Scott, El Toroongo. Tolinski.\n\n00:27 Scott Tolinski:\nWelcome to syntax ESLint this nextepisodeof syntax. This hasty treat we're gonna be talking about next JS version 12, and all of the hot new goodness that came along with Next JS version 12. My name is Scott Tolinski. I'm a developer from Denver, Colorado. And with me as alwaysis the West boss.Hey, everybody. Hey, West. How's it going? Good. Excited to talk about next js 12. It's got not like Not a tasty amount of updates, but a hasty amount of updates and some really good updates I'm excited about. Yeah. The amount of updates we'll say is tasty, but the quality of the updates is definitely tasty. Now what's definitely also tasty is 2 of our sponsors today, and I'm talking about sanity and log rocket. West, do you wanna talk about sanity and I'll talk about log rocket? How about that? Sanity is your structured content editing experience.\n\n01:24 Wes Bos:\nIt's not just a CMS.It'sa Scott just dropped his snack and brushed it offand continued to eat it.Okay, back to sanity, sanity, it's not just a CMS. It's a entire content platform that enables better editing of your digital experiences. What does that mean? Well, you can set up sanity with your schemas,all of your data, you can create relationships, all of your input fields. You can relate those things to each other, and then the whole editing experience on top of those schemas is ESLint can have your editors follow processes. You can send things for approval. You can conditionally put fields in there. It's an awesome I'm gonna say it's a CMS.It will do all of your images for you. You can integrate it with another 1 of our sponsors, Mux,which does your video, which is Awesome. So check it out. If you are building a website or an app and you need acontent platform, check out sanity. I urge you sanity dot I o forward slash syntax.It's gonna get you double the free usage here. Thank you, sanity, for sponsoring.\n\n02:32 Scott Tolinski:\nIf what if your usersmetaphoricallydrop their snack on the ground, brush it off before eating it. Then you'll probably wanna make sure that you can find whatever that metaphorical bug is. In your site and with the service called log rocket. Now log rocket will do exactly what West just saw and got to see me brush that snack off,get to see it with his own eyes, and log rocket is a service where you can see with your own eyes,all of the bugs that are happening in your application because as they happen, it records a session replay, which allows you to check out the network request, the error logs, and so much more while a user has committed some atrocity on your site. And now you can actually figure out how they did it. Users said they come to you and they say, oh, this the site turned blue. What'd you do? Why is the site turning blue? And you say, oh,silly it shouldn't have done that. You must have done that and then you can watch in horror as it turns out that their valid bug is actually a valid bug and something that you had done wrong because now you can see all that with confirmation video and more. It is so super cool to it out at log rocket dot com forward slash syntax. Sign up today and get 14 days for free. Seriously, watch their video, watch their marketing stuff. This is 1 of those services you gotta see it to believe it. I'm definitely a big, big fan of visibility in tracking down my bugs. So check it out at log rocket dot com forward slash and text. Alright. Next, let's get into next jsand all of the hot new updates.Now next js is been cruising along, and they they come out with new stuff all the time. But this is NextAS version 12. It's a major version of next, and ESLint includes some heavy hitting performance,an optimizationfeature. So the headline feature, I think, for for a lot of this stuff is the new rust compiler.Now, swCis a TypeScript and a JavaScript compiler that consumes JavaScriptand TypeScriptand basically,we'll just spit out JavaScript for the browser to read. Now it's very fast. Is is really 1 of the the key components of this thing. Now we we've been seeing a little crop of some of these new tools come up, and SWBC has been being worked on for a while now. So it's really, really, really interesting to see that next js is shipping with SWCfor 3 times faster fast refresh and 5 times faster builds.So very fast stuff coming out and utilizing rust, which feels like a very modern way of approaching the problem. Yeah. So what does this replace in next js? I'm assuming that -- Babbel. -- this replaces both Babbel,\n\n05:07 Wes Bos:\nwhich Babbel what used to take yourJavaScript and convert it intoother TypeScript. So if you had things like experimental features,or in our case, it JSX that needs to be converted to TypeScript. It would do that. SWBC also does that. And it is sort of a babble alternative.It does most of what Babble does, but if you still have like some like, weird stage 0 or stage 1 babble plugins.You might not want to to use this. So this also if if I'm correct, this also will replacea webpack or is thisused with webpack? I think we've talked about this before. I just forget. This is just for JavaScript.So I would assume it does not replace Webpack. Oh, yeah. Yeah. It says we've made numerous improvements a webpack including optimizing fast refreshand making on demand.\n\n06:02 Scott Tolinski:\nYeah. So this isn't touching your CSS, your any of that stuff. It's not handling your fast reloads. It's not handling that stuff. It's simply just -- all of that. -- compiling the JavaScript. Yeah. Okay. Makes sense. And then the the fast refresh is still done via Webpack. That's awesome. So really, really excited about that. I remember we talked about\n\n06:21 Wes Bos:\nthis type of thing happening in next year. And here we are.The next big thing, and I'm really really excited about this, is that they've introduced a concept of middleware.So if you've never used middleware before, it's very popular in JavaScript world,in Express world, most other frameworks have a concept of middleware as well. And in fact, most frameworksuse this thing called Connect Middleware -- Mhmm. -- meaning that you can just share middleware packages betweendifferent JavaScript frameworks like Express or Fastifier.Does Fastify have middleware? Yeah. Fastify has its own. Yep. There you go. So with the idea with middleware is that when you have a request going into your node server,you're able to sort of intercept that requestdo a little bit of work and then carry on that request down the line. And you can do things like make sure somebody's logged in. You can do things like make sure somebody has a role or permission.If they're logged in or not, I specifically use a middleware to make somebody is logged in before they hit any of the API endpoints.They have other examples here logging AB testing, server side analytics,redirects.That's another good 1 is if somebody were to visit 1 of the URLs for my videos directlyand that video is private, unless you're logged in, then I'll just redirect them to the the login page. So my course platform runs very heavily on middleware.And when I saw this, I was like,maybe Icould pretty easilymove overmy platformfrom right now. It's just a express single process,I could move that over to next js. And, like, I that wouldn't change any of the code that I I have written because it's it's still JavaScript running on node at the end of the day, but it would all be in 1 nice little package. So pretty excited about that. We're excited about that. Yeah. Same, next up is React 18 support.\n\n08:17 Scott Tolinski:\nWe did an episode on Reacteen. If you've been paying attention, React 18 is it exists. It's in some sort of a, you know, a pre release era pre release phase. So next step is that it supports React 18.So underneath a flag,you can use React 18 APIs. Now Rack 18 isn't stable yet, but if you want to give these things a try, you can. And it seems like you can enable various18 features independently.So for instance, if you'd like to enable server side streaming,you can enable concurrent features, there's React server components which you can enable or disable.I haven't used React server components or anything like that yet, as intense as I am about trying new stuff, I I still kinda just wanna wait until these things are all complete before going ham on them. But this port is starting to come in now, so that's pretty neat. It's almost a year now that\n\n09:15 Wes Bos:\nReact announced server components and server side streaming. Yeah. AndI remember Nextjazz showed a demo of it. And we're almost a year later now. We Just starting to see the peeking head of being able to to try this kind of stuff. So previously, you had to install, like, a custom version of NextGS, I believe. So that's it's good. This react stuff I've learned to just, like, sit on my hands and wait for it to actually come -- Yeah. -- because with suspense and server components, they announce it, and then 2 years later, we still don't have it. So they're working in public. It might not have ever be a thing I've learned. So I just sit on your hands and wait for to come out and then start using it. Yep. Totally. Totally. Totally. Totally. Totally. Next 1 is AvIF,AVIFsupport in their image component. So I it was next 11, they announced an image component, which was 1 of the killer features of using Gatsby. Mhmm. Just sick. Awesome. Ground breaking. It's awesome. And Gatsby always had support for AVIF, which is very very small versions of images.\n\n10:16 Scott Tolinski:\nAnd now NextGS has rolled that out, and that's really exciting to see. Yeah. So who can actually consume Avith? It looks like Firefox has a version 93.And it looks like Chrome has a version 95.And I bet you'll all be able to guess that Safari, of course, does not support it. Along with IE. SurprisinglyEdge doesn't support it. I don't know if how that makes any sense, but it doesn't. Yeah. What the heck? Yeah. It's weird because I mean, Edge is Chromium based. So you you feel like if all the other Chromium based browsers have it, then why doesn't Edge have it? But that's interesting.Of course, if you know anything about how browsers work on Bos, ESLint Safari doesn't have it, they all don't have it because all the browsers on iOS are Safari.So you don't get it on mobile, which honestlyis the place you're probably gonna want it the most unless, of course, you're on Androidusing Chrome for Android or Android browser or any of them except for Firefox for Android. Doesn't either? We should say that you as the developer\n\n11:13 Wes Bos:\ndon't really have to sweat these details. You just use the image component in Next or Gatsby or whatever framework you're using, and it'll be figured out. It will fall back to a JPEG. That's that's the beauty of using either a servicelike cloudinary, Imageix, or doing it, you're generating them yourself with 1 of these frameworks. Is that they will always fall back to at the end of the day, at JPEG or P and G, if webpor AvIF or any of these modern formats are not supported. Yep. Foreats, man. They've just been a world of unsupported\n\n11:45 Scott Tolinski:\nformats for the entirety of being a web developer. It's like, This is 1 thing that you will never get past is how can we just get the best format supported by all the browsers the fastest, please. Especially with media.\n\n11:57 Wes Bos:\nOkay. Cool. Next is going to be the Bos aware ISR fallback. West, do you know anything about this? Because I don't know anything about this. Yes. It stands for incremental static regen in x-ray. That's what ISR is, and the sort of the idea is that when you're visiting a page for the first time,that page will not be rendered yet if you're doing them render on demand. So some of this is a web then they see a loading screen because that page hasn't been generated yet. And then the next person that comes and visits it, then it will have been generated. And that can be a bit of an issue with Google bots because, like, if Google visits your page and just sees loading dot dot dot, then it will index that. So they will be able to detect web crawlersand wait for those things to fully render before they get sent out. So that's another good use case for, like, this whole, like, JavaScript and SEOcontinues to get easier. Still not there yet, but that's another step in the right direction, I believe. Kinda feels like just like solving a bunch of problems that we created, you know. Yeah.\n\n13:03 Scott Tolinski:\nHey, let's just make a bunch of problems and then solve them. Yeah. Yeah. That's the web developers. Yeah. Alright. Next 1 is going to be native e s module support. So now everyone gets toget the joys of working in an ESM environment where suddenly things just complain at you for no reason. So that's great. As somebody who's been in ESM for, like, a little while here, it's a little Tolinski, you will run into issues, but, you know, the best part abouteverything getting nativee s module support is that the more things that have it, the less issues we're gonna have because the more people using it, the more bugs are gonna pop up and the more weird packages are just gonna stop working and stuff like that. So, yeah, shout out to e s modules. Happy to have the support here for that. And let's just hope that that transition gets smoother and smoother as I'm sure it will. We need to do a website of, like, where are yes, modules in the node to eco system right now because Oh, man. It's hard. Yeah. It's hard. And it's not like there's a lot of people that complain about it that don't understand the complexity of the ecosystem.\n\n14:06 Wes Bos:\nSo maybe we should do 1 in terms of, like, we know it's hard, but this is where it's at, and this is how you can sort of approach your your projects.\n\n14:13 Scott Tolinski:\nEither using or moving over to ES modules. Yeah. Totally. In terms of, like, frustrating types of issues that you can encounter in the web, This is a new 1 for me in terms of being ultra frustrating. It's this, anything where, like, a common j s package won't load inside of an Pnpm module situation.That and the GraphQL more than 1 version being loaded, errors are, like, the bane of my existence and I will just decry anytime either of those pops up. Next 1 is you are all imports.\n\n14:40 Wes Bos:\nSo this is like the first steptobeing able to import things that are not in your node modules directory, but import them from a URL, which is part of the ESM spec, meaning that you can import whatever from HTTP, colon slash slash, and there are lots of different websites that host e s modules. Guypack is probably the biggest 1JSPM,unpackage.There's a whole bunch of different ones out there and that's kinda exciting as well that you have no Pnpm installtime. You just simply just import it from a URL and it will go off and grab it when it needs it. Yeah. I wonder how this will end up working in practice. You know, I think it could be really really neat to have these this functionality here. I I wonder in which cases is it gonna be really super usable? I'm curious about that as well because, like, a lot of people hate the huge node modules directory and and the problems that come along with that and specifically my little story here. I I got my new MacBook and I tried to just time machine and restore from it. And because I had, like, millions and millions of node modules files on my computer, it was telling me 60 hours to move this thing overbecause moving 1 file over at a time even if they're small files takes a lot of work. So what I had to do is TypeScript the whole thing, and then I deleted something, like, 30 or 40 gigs of node modules on my computer, and then I moved it over in a couple hours. Is much faster. So there's that pain of having to and then also needing to Npm install the correct thing. Yeah. It will be nice to just import the thing. But I also wonder, like, how do peer dependencies work with that? You know? I don't know. You know what, Matt Pnpm Perry from Framer Motion,fame. He he said that it's really exciting for them for, like, demos to being able to pass along a demo with, like, version swap. Yeah. That's a good point. Like, just import whatever from you. But, like, you can I guess you can lock things other But if you're just, like, sharing a file or sharing maybe it's better copying and pasting into replicas and stuff? Yeah. Yeah. That's true. I'm just sending somebody a single file to test something. Yeah. Alright. That is next js 12. Really, really exciting. As always, next updating next js is very, very painless. If you keep up to date with there's usually not too many breaking changes here or there. Updating is not a big problem. I've always been very happy updating my next JS applications. Not a huge big deal. So check it out, Npm,update everything, and you'll be\n\n17:11 Scott Tolinski:\nripping on next js 12. Yeah. Yep. Rippin. Rippin. But yeah. We will see you on Wednesdayfor a potluck episode of syntax. Catch it in. Peace. Peace.Head on over syntax dot f m for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.\n\n17:46 Wes Bos:\nMy name is Wes, my dog eats food on the moon.\n\n17:52 Scott Tolinski:\nMy name is Scott,Please buy some purple cheese before meeting my brother.\n"
      }
    ]
  },
  "output": {
    "id": "chatcmpl-7FRT7naw4maI1g9Sjj0rp1114m0EC",
    "object": "chat.completion",
    "created": 1683914865,
    "model": "gpt-4-0314",
    "usage": {
      "prompt_tokens": 4831,
      "completion_tokens": 881,
      "total_tokens": 5712
    },
    "choices": [
      {
        "message": {
          "role": "assistant",
          "content": "{\n  \"title\": \"Hasty Treat: Next.js 12 - Exciting Features and Updates\",\n  \"description\": \"In this hasty treat, Wes and Scott explore the exciting new features and updates in Next.js 12, like the new Rust compiler, middleware, and React 18 support.\",\n  \"summary\": [\n    {\"time\": \"00:27\", \"text\": \"Introduction\", \"description\": \"Wes and Scott introduce Next.js 12 and its new features.\"},\n    {\"time\": \"01:24\", \"text\": \"Rust Compiler\", \"description\": \"Next.js 12 includes a new Rust compiler, SWC, which makes Fast Refresh 3x faster and builds 5x faster.\"},\n    {\"time\": \"06:21\", \"text\": \"Middleware\", \"description\": \"Next.js 12 introduces the concept of middleware, allowing developers to intercept requests, perform tasks, and modify response data.\"},\n    {\"time\": \"08:17\", \"text\": \"React 18 Support\", \"description\": \"Next.js 12 includes support for React 18, allowing developers to use React 18-specific features.\"},\n    {\"time\": \"10:16\", \"text\": \"AVIF Support\", \"description\": \"Next.js 12 now supports AVIF, a new image format that provides improved compression and quality.\"},\n    {\"time\": \"11:57\", \"text\": \"Bot-aware ISR Fallback\", \"description\": \"Next.js 12 can detect web crawlers and wait for pages to fully render before sending a response, improving SEO.\"},\n    {\"time\": \"14:40\", \"text\": \"Native ESM Support\", \"description\": \"Next.js 12 includes native ES Module support, enabling smoother module imports from URLs.\"},\n    {\"time\": \"17:46\", \"text\": \"Conclusion\", \"description\": \"Wes and Scott conclude the episode discussing the Next.js 12 updates.\"}\n  ],\n  \"tweets\": [\n    \"Get ready for Next.js 12 with its blazing fast Rust compiler! Crazy build speeds await! 🚀\",\n    \"Middleware has finally arrived in Next.js 12! A game changer for web developers. 🎉\",\n    \"Next.js 12 now supports React 18! Prepare your projects to embrace the future of React! ✨\",\n    \"AVIF format images, best of the best compression, now supported in Next.js 12! 📷\",\n    \"Worried about bots and SEO? Next.js 12 got you covered with bot-aware ISR fallback! 🕵️‍♂️\",\n    \"Next.js 12 includes native ESM support, making those module imports smoother than ever! 📦\"\n  ],\n  \"listener_tweets\": [\n    \"This hasty treat on Next.js 12 updates was really insightful! Thanks, @syntaxfm!\",\n    \"Super excited to start using middleware in Next.js after listening to this hasty treat from @syntaxfm!\",\n    \"Next.js 12 and React 18 support? Sign me up! Thanks for the update, @syntaxfm!\",\n    \"AVIF image support in Next.js 12 is a game changer, can't wait to start using it! Great episode, @syntaxfm!\",\n    \"Just learned about the bot-aware ISR fallback in Next.js 12! Thanks for sharing, @syntaxfm!\",\n    \"Native ESM support in Next.js 12, say goodbye to module import headaches! Great hasty treat from @syntaxfm!\"\n  ],\n  \"topics\": [\"Next.js 12\", \"Web Development\", \"React\"],\n  \"links\": [\n    {\"name\": \"Sanity\", \"url\": \"https://sanity.io/syntax\"},\n    {\"name\": \"Log Rocket\", \"url\": \"https://logrocket.com/syntax\"}\n  ],\n  \"speaker_times\": [\n    {\"name\": \"Wes Bos\", \"time\": \"08:35\"},\n    {\"name\": \"Scott Tolinski\", \"time\": \"09:17\"}\n  ],\n  \"mid_journey_prompt\": \"Create a visual representation of the new features in Next.js 12 with a modern design and minimalistic style. The background should be a light, neutral color with vibrant accents for each feature.\",\n  \"guests\": []\n}"
        },
        "finish_reason": "stop",
        "index": 0
      }
    ]
  }
}