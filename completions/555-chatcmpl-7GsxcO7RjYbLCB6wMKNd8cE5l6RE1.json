{
  "input": {
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "You summarize web development podcasts"
      },
      {
        "role": "user",
        "content": "Syntax is a podcast about web development. Available at https://Syntax.fm"
      },
      {
        "role": "user",
        "content": "This episode is #555 entitled Were We Wrong? 2022 Predictions Revisited"
      },
      {
        "role": "user",
        "content": "This episode is #555 entitled Were We Wrong? 2022 Predictions Revisited"
      },
      {
        "role": "user",
        "content": "Summarize the provided podcast transcript into very succinct bullet points, each containing just a few words. The bullet points should correspond to sections or topics discussed in the podcast with points at least every 3-5 minutes. For each bullet point, you may also provide a longer 1-2 sentence summary of the topic if necessary, which may also include the hosts opinions, thoughts. Do not skip topics.\n\nRemember, the key here is to read through the transcript carefully, identify all points, topics, questions and even banter, and then condense each one into a very brief, clear statement. It's also important to include timestamps if they're provided in the transcript, as they can help give a sense of the flow and structure of the podcast.\n\nAdditionally, Please create the following for this podcast episode:\n\n1. 1-2 sentence description about what is covered in the podcast. This should be a short, catchy, and interesting description. It should provoke the listener to stop what they are doing and listen to the podcast.\n2. 6-7 tweets for this podcast episode. These tweets should be short, catchy, and interesting. They should provoke the twitter user to respond an join in the conversation. Do not use hashtags or emojis. Use Exclaimation points sparingly.\n3. 6-7 tweets about this podcast that can be tweeted by listeners of the show. Some examples are \"This is a fantastic episode about ___\", or \"I really enjoyed the part about ____\". They should mention @syntaxfm\n4. 3-4 hashtags that categorize the episode. these will be used as topic tags on the website.\n5. A summary of the podcast into a title. It should be catchy, slightly click-baity, mention a few topics covered and make the listener want to stop what they are doing and watch it.\n6. Keep track of any links or websites mentioned in the podcast. These will be used as links on the website. If you can't find the link, provide only the name of the website.\n7. tally the time each speaker speaks by using the provided timestamps. Do not guess.\n8. Provide a list of guest names. If the transcript doesn't include their real name, try to infer it.\n\nIf you, the AI, have feedback or clarifications on your response, please put them in the notes section.\n\nReturn each of these things in JSON format that looks like this:\n\n{\n  \"title\": \"...\",\n  \"description\": \"...\",\n  \"notes\": \"...\",\n  \"summary\": [{\"time\": \"02:33\", \"text\": \"...\", \"description\": \"...\"}],\n  \"tweets\": [\"...\"],\n  \"listener_tweets\": [\"...\"],\n  \"topics\": [\"...\", \"...\"],\n  \"links\": [{ \"name\": \"Name of link\", \"url\": \"https://example.com\"}, \"...\"],\n  \"speaker_times\": [{\"name\": \"Wes Bos\", \"time\": \"02:33\"}, \"...\"],\n  \"guests\": [\"...\"]\n}"
      },
      {
        "role": "user",
        "content": "\n00:01 Announcer:\nWelcome to Syntax, the delicious web dev podcast. Fasten up, here's Scott Tolinski and Wes Bos!\n\n00:11 Wes Bos:\nWelcome to Syntax, the podcast with the tastiest web development treats. We'll review our 2022 predictions and see if we were right, as we usually are. We'll discuss serverless, edge functions, developer tooling, TypeScript, GraphQL, and more. Our sponsors today are Sentry, the error exception and performance tracking tool; Sanity, the content storage for your app or website; and Auth0, providing multi-factor authentication and biometrics for app logins. Interestingly, Chat GPT uses Auth0 for login, handling millions of sign-ups seamlessly.\n\n01:06 Announcer:\nIn this episode with West Bos and Scott Tolinski, they discuss various technical issues and their excitement about going over past predictions and sharing new ones. They mention the growing popularity of Svelte kit and Svelte, celebrating the recent release of version 1. They also discuss Pnpm's increasing attention in the tech world. Overall, they're enthusiastic about covering these topics during the episode.\n\n02:26 Wes Bos:\nI attended a Svelte launch party and read through the entire Svelte kit docs. It was awesome, straightforward, and had a beautiful API. It covered server-side rendered components, serverless functions for handling data requests, middleware called HUCKS, and more. I felt like it had everything I wanted.\n\n03:12 Announcer:\nI was like, what else do I want? Couldn't think of anything. It's funny, docs are succinct but when doing my Svelte Kit course (on levelup.video, give it a try), I realized that the feature set keeps going. It's like an iceberg, but with everything easily accessible at the top and more intense stuff deeper.\n\nNext up, regarding Next.js predictions, they haven't rolled out a data layer but finally introduced nested routing, which we've wanted forever.\n\n04:23 Wes Bos:\nIt's truly nice how Bos routing is used without a data layer, remaining agnostic. We're seeing Tanner Lindsey's React query transform with adapters for all. People are writing JavaScript libraries and exposing them for different frameworks, which is impressive.\n\n05:28 Wes Bos:\nGitHub reveals Open UI's active development, which aims to identify necessary built-in UI elements in browsers by analyzing common components in various frameworks, such as multi-select dropdowns, cards, and date pickers. The goal is to eventually have styleable browser primitives, possibly implemented as web components with shadow DOM, resulting in improved default elements.\n\n06:19 Announcer:\nWe discussed Rust's increasing popularity, which has become almost a ubiquitous joke when discussing rewriting projects. Rust continues to evolve, and its popularity keeps growing.\n\nWe also touched on Rome, a formatter developed by the creator of Babel, intended to be a multifunctional tool for TypeScript and supporting JSON, HTML, Markdown, and CSS. It aims to be a compiler, bundler, and testing library. I tried the Rome formatter in my code but experienced crashes, although the issue could have been unrelated to Rome. By the time these features for Rome fully launch, there might be other tools in use that serve similar purposes.\n\n08:04 Wes Bos:\nThough it's hard to say, I don't know if they missed the boat or maybe we will see once it's all done. But Deno is rolling out all of these things themselves.\n\n08:16 Announcer:\nNode is launching their own type ESLint.\n\n08:19 Wes Bos:\nYes, note that there's a built-in test runner in Node. It's interesting and makes more sense to use the one incorporated in the framework you're working with. Totally.\n\n08:32 Announcer:\nI wrote my first lines of Rust a few days ago, and I like it. The syntax is similar to JavaScript. Learning Rust and TypeScript simultaneously improved my TypeScript skills since Rust's types are similar to TypeScript's, especially in their usage of generics. Rust enforces type correctness, while TypeScript only gives warnings. This forced me to pay more attention to types and improved the quality of my code. Following Jared from Bunn on Twitter is also enjoyable.\n\n11:18 Announcer:\nSeems nice, but not many people use it yet. I'm a fan and have used it with g query. Open props, if unfamiliar, are preset CSS variables. It's less extensive than an atomic CSS framework like Tailwind, but with a single import, you have shadows and colors easily available, without coding from scratch. I liked working with it, but haven't used it much since I made my own version for level up.\n\n12:18 Wes Bos:\nOne major issue with Tailwind is its divisive nature - people either love it or dislike its approach. It's fine to have preferences, but it seems that every week, someone criticizes its maintainability and aesthetics, leading to never-ending circular arguments which become tiresome.\n\n12:51 Announcer:\nPeople often repeat the same opinions about Tailwind. It has both haters and big fans who are very vocal. Even when I mentioned something slightly negative about Tailwind at an ESLint event, people reacted strongly. It's one of those things that, like politics, both fans and anti-fans are so passionate that it makes me not want to discuss it at all, to avoid criticism or backlash from either side.\n\n13:40 Wes Bos:\nYou know, I have that with Wise products too. Every time I post anything about them or any technical stuff, the worst people come out on both sides. My personality isn't based on using a Wise camera, and I don't care if you don't like it. People find an old article about a minor security issue that's unrelated to current products, and it's just exhausting. Now I wonder if I should even tweet about it, because that guy might come out of the woodwork.\n\n14:22 Announcer:\nI know, I tweeted about one of Elon Musk's questionable choices and immediately regretted it. You have illogical thinkers, angry people, and those who defend every decision. Why did I even bother?\n\n14:43 Wes Bos:\nI recently had beers with a friend, and we discussed how many people went crazy during the pandemic, becoming Instagram warriors for or against closures, vaccines, and everything else related to it. We laughed because these extreme opinions ruined friendships, and even though my friend and I disagreed on some issues, we acknowledged that being obnoxious and extreme about them convinced no one.\n\n15:27 Announcer:\nYeah, you know, discussing divisive topics may not convince anyone, but people are just venting, which is valid. It's essential to consider whether you're trying to gain support and assess your approach. I'm emotional too and may make tweets based on feelings rather than logic.\n\nThis episode is sponsored by Century, a fantastic long-time sponsor, which is great for seeing errors, exceptions, and bugs impacting users on websites or web services. It helps collect and understand issues, monitors performance, and even identifies slow functions. Century offers custom dashboards and release breakdowns to see the crash-free rate and find any bugs. Use coupon code \"tasty treat\" for 2 months free. I use this service every day. \n\nNext up, next gen dev tools had a big year.\n\n18:12 Wes Bos:\nMhmm.What were they?I don't think we have anything about\n\n18:17 Announcer:\nWhen was Copilot released? Interesting. It could be around 10/29/2021.\n\n18:28 Wes Bos:\nSo very I don't I don't know that I had access to it until the beginning of this year. I'm curious.\n\n18:34 Announcer:\nI don't remember when I got access to it, but if if it didn't make it into that episode, then\n\n18:39 Wes Bos:\nThis year, major things included Warp becoming very popular, with full-time commitment. AI integration has become huge and widely used. Some people use Starship as an alternative prompt, establishing it as a safe option. Overall, a significant year for dev tools.\n\n19:12 Announcer:\nRust and dev tools have been growing, and stagnant tools like iTerm 2 and Vercel might start getting smarter. Our prediction for CSS container queries, layers, and new filters was a bit early, as Firefox hasn't launched container queries yet. However, the issue is progressing, and it seems we're on the right track. We didn't specify that everyone will use container queries for everything, but they became a thing this year. I haven't used them in production but anticipate their growth to be significant. So, what new CSS features emerged this past year?\n\n21:07 Wes Bos:\nHas is prevalent except in Firefox. Nearly there with Has; Firefox contains an outdated, flagged version that doesn't work. We may have discussed aspect ratio - a topic that gained prominence.\n\n21:25 Announcer:\nThis year, CSS features seemed to be released rapidly, yet when considering new features in 2022 specifically, container queries was the main one, taking nearly all year to arrive. We also have GraphQL.\n\n21:48 Wes Bos:\nGraphQL seems to have stagnated, with some people experiencing exhaustion and questioning its necessity for their apps. Alongside this, TRPC gained popularity. We discussed GraphQL with Sanity folks in a previous episode, where they shared insightful thoughts.\n\n22:16 Announcer:\nInsights on fetching data with GraphQL have evolved, and TRPC wasn't on our radar last year. It’s one of those things that appeared unexpectedly and has improved typed APIs. I listened to a previous episode about GraphQL, discussing issues with scalars where custom scalars are needed for dates or special types not built-in. This hasn't changed. \n\nThe guild has released more tools for GraphQL, but people seem exhausted with it, likely due to implementing it in projects that didn’t need it. GraphQL works best in interfaces with multiple UIs and APIs, functioning well in larger ecosystems with many users consuming the API. Those who didn't need it, like me, feel they don't reap the same benefits. We're moving away from GraphQL not because it's bad, but because it doesn't benefit our site size like it would for others. GraphQL is a spec, obviously.\n\n24:27 Wes Bos:\nThe issue with specs is that if they're not updated, people either do nothing or create another, like with markdown, resulting in situations such as Node with IO.js and Deno. Though IO.js isn't a spec, but just an implementation. JSON is a spec with JSON 5 now, which includes features like comments and trailing commas, but Node won't adopt it due to compatibility issues. This creates dilemmas with two specs, as illustrated in XKCD. Recently, the Docuall spec integrated two RFCs, allowing input value deprecation and the full Unicode range.\n\n25:34 Announcer:\nSo, not much, right? Those are the major updates for the year. There are many quality of life aspects in GraphQL, like sharing input types with types, extending or using fragments in input types. But there are also double diff definitions and some obnoxious issues that pop up in every GraphQL project. Although GraphQL hasn't evolved much this year, people are changing how they view it – not as the future of all APIs, but as a useful tool for specific types of APIs.\n\n26:28 Wes Bos:\nDeno, it's funny because 2-3 years ago, we said Dino would explode. In our review, not much happened, and Natalie didn't hear anything about it. But a month later, it started gaining attention. This year, Dino will pnpm. It popped. I'm using Dino a lot now due to NPM support and fantastic editor integration. You can use TypeScript easily. They're part of the Winter CG Group. Big year for Deno, we nailed it. Nellify uses Deno for their edge functions, and it's used in production in other places too.\n\n28:13 Wes Bos:\nThe thing about Deno is, if you know JavaScript, you know Deno. I'm at a point where, when writing a file, I question whether to use the Node or Deno API. Node works everywhere, including Cloudflare Workers. So, is the Node spec actually the spec, even though we just said it wasn't? Maybe it is.\n\n29:47 Wes Bos:\nWe also said TypeScript will become more popular.I agree. Don't you think you agree?\n\n29:53 Announcer:\nI believe TypeScript has become the go-to choice these days. As we've discussed on this podcast, it's about waiting for the winner to emerge. Wes and I mentioned this while comparing TypeScript with Flow (or was it a GraphQL thing?).\n\n30:17 Wes Bos:\nI'm confusing it with Relay, Facebook's GraphQL. It was Flo, and you have JS doc, and Reason ML. What's Reason ML?\n\n30:28 Announcer:\nReasonMLwas basicallyanother it's like an Oakimal type of syntax.\n\n30:35 Wes Bos:\nCompile to TypeScript.\n\n30:36 Announcer:\nYes, its intention was to solve the same issues as TypeScript, providing type safety. However, some found the syntax too different and weird, requiring extra effort. I'm unsure why Flow didn't overtake TypeScript, but personally, I've mainly used TypeScript, which seemed to have better branding. The blue logo with \"TS\" looked similar to JavaScript's, making it easy to associate with. If it had Microsoft's logo and was called \"Microsoft script,\" it might not have gained the same popularity.\n\n31:39 Wes Bos:\nLike, a pixelated Windows icon with a folder and a folded edge. Microsoft is cool, as most stuff I use, except my browser, is Microsoft. They've become a big part of our lives. VS Code integration with TypeScript is great, as it just works without installation. For those unaware, VS Code runs TypeScript against your JavaScript, providing nice autocomplete. When it's missing, you might think about writing everything in TypeScript.\n\n32:34 Announcer:\nCrazy, right? TypeScript 1 surely prevailed. Funny how we decided to wait and see which one would win, and now we're all using the clear victor. So, one question is...\n\n32:48 Wes Bos:\nall year, did you everhow like, how many times do you think you've had to go install\n\n32:54 Announcer:\nThere are separate types for a library, like npm install at types. Ever used an untyped library? I have only one project I work on - Level Up Tutorials, and I've installed types there. In the repo, I have types for low dash (not sure if needed), marked, and prism JS. That's all.\n\n33:26 Wes Bos:\nMarked, PrismJS, and Lodash are examples of packages with types. Most packages now ship with types, making it unnecessary to install separate types. Libraries written in TypeScript or shipping types have gained popularity.\n\nSanity.io, one of our sponsors, recently released Sanity Studio Vercel 3, a UI for editing content. It's a hosted service with custom workflows, editing history, timed releases, and more. Built in React, the UI works in React applications. Check it out at sanity.io/syntax for double the free usage tier.\n\nThe trend of returning to server-side rendering is evident through JavaScript sprinkles, server-side rendering in React world like React server components, and other libraries implementing server rendering. The default approach nowadays is starting server-side and enhancing with client-side as needed.\n\n35:50 Announcer:\nDefinitely popular, and I'm all for it as it has eased working with isomorphic contacts on both server and client. It feels easier this year, with more resources and better functionality. Even in aspects like payment processing, the improvements are noticeable.\n\n36:22 Wes Bos:\nNot much has changed in the world recently. A notable update is Stripe's new feature a few weeks ago, allowing users to fund blockchain wallets with a credit card without a third-party processor. This doesn't involve paying with Bitcoin. Users can now get credits in various currencies using a credit card.\n\nUnfortunately, not much progress has been made in making autofill more popular, and custom checkouts still require significant effort.\n\n37:12 Announcer:\nI probably predicted that Brain Tree wouldn't improve, and they haven't. Their new GraphQL API isn't as nice as their previous one, which also wasn't great. It hasn't fixed any of their major issues.\n\n37:46 Wes Bos:\nSo, I saw that Gumroad, a popular tool for selling digital products, increased their cut from 2.7% plus credit card fees to 10%. They're likely planning to ride this change for as long as possible. They probably have a few major sellers who can't afford to leave immediately. I've experienced similar situations, like when Vimeo increased their prices. I had to pay because I couldn't switch at that moment. This could also be a recession-related move since they might be losing customers and facing a dropping bottom line, so they're trying to maximize profits before retiring.\n\n38:42 Announcer:\nYeah, the Gumroad folks, though I don't know them personally, have made some questionable decisions. They've had promotions anyone can join, but later reveal it's for new customers only, which seems anti-consumer and shady. Such things have discouraged me from using Gumroad as a service. I saw Nathan Barry, who runs ConvertKit.\n\n39:19 Wes Bos:\nYes, he suggested using ConvertKit as it takes less. When asked about PayPal support, he firmly refused. This is a reason many won't switch since, despite disliking it, around 37% of my income comes from PayPal, so I'll keep supporting it.\n\n39:45 Announcer:\nDude, I went with Braintree for PayPal support since many people wanted it. It made me choose their API over Stripe's. I'm paying more but we've got a lot of PayPal customers, so it's tough to tell if it's worth it. I saw people moving from Gumroad to this platform called Lemon Squeezy. It offers everything: Payment TypeScript, tax compliance, fraud prevention, multi-currency, failed payment recovery, PayPal integration, and even AI in their marketing. It looks really cool.\n\n41:01 Wes Bos:\nBut That looks good.5 percent plus 50 cents. So\n\n41:06 Announcer:\nThey take a 5% cut, but that doesn't include credit card fees. People wonder why you'd create your own version of this, but using services like Recurly or Lemon Squeezy means additional cuts on top of existing ones. As a business owner, I'd rather reinvest the money from customers into the business instead of paying merchant and subscription fees.\n\n41:47 Wes Bos:\nMany businesses operating on these platforms likely calculate their annual expenses, deciding between hiring a full-time developer for around $130,000 per year or another option.\n\n41:59 Announcer:\ncontinuing to pay this app? I've internally questioned whether my decision was totally incorrect.\n\n42:09 Wes Bos:\njust eat the cost. It's constant. Maybe there's a show: buy it or build it. Great. Can we put that on the books? Let me open a tab in Notion. It's easier now. Did we predict Notion getting tabs? I had no hope, but they shipped it. It's not amazing, but it works.\n\n43:06 Wes Bos:\nLet's discuss our sponsor Auth0, which handles authentication and permissions for your application. It supports various options and even serves as the login provider for OpenAI and their GPT stuff. When using Auth0, you can easily implement a branded login system with Google, Twitter, Microsoft, and more, plus tokens for authentication. Check it out at auth0.com/syntax for examples. Thanks, Auth0!\n\nOnto Deno and the Temporal API that didn't take off. There are some polyfills for it. The Temporal API is the upcoming TypeScript feature that replaces date and includes timezones, formatting dates, and more. It's a huge spec, and its release date remains uncertain.\n\n44:58 Announcer:\nTemporal is currently in production, but only in the admin side of our site, not for users. I genuinely love it and wish it could be available for everyone sooner. I've already created helper functions for it, which makes it easy to work with, and it never causes confusion. I recently used Temporal API for formatting and found it excellent, without needing a library. Though we are shipping a polyfill to the admin side, which is a library, I would love for Temporal to make more progress and be integrated into browsers soon, as I'd be happy to use it.\n\n46:37 Announcer:\nAlright, we might discuss it in our predictions episode.\n\n46:44 Wes Bos:\nLast week, we predicted that remote dev and thin ESLint would gain popularity. It did, but not as expected. I thought I'd use my browser as an editor, but instead, I relied on two GitHub features: the new file layout and GitHub code search.\n\nThe new file layout has a file tree on the left, code in the center, and types and instances on the right. I used it to navigate the VS Code codebase for an API, and it helped me trace a console log through multiple classes easily.\n\nGitHub code search helped me find projects utilizing specific APIs, allowing me to learn from their implementation instead of referring to documentation.\n\nI am unsure if everyone has access to these features or if it's only limited to GitHub stars. However, I've found these tools incredibly useful for development tasks.\n\n48:41 Announcer:\nObviously, stars get special treatment, like access to GitHub code search. I haven't used it, maybe because I've been focused on a level up redesign. Over Christmas break, I plan to explore and create a fun list of things to do.\n\nWe should save our predictions for the next segment. This year, we were 100% correct, and we hope to surpass that with our next predictions. Now, let's discuss our picks.\n\nWe both discovered these mini label makers, the NIMBot and a similar one I picked up. They cost around $23, come in various designs, and are perfect for organization. Their size is approximately half a foot by a quarter of a foot.\n\n51:05 Wes Bos:\nCentimeters are often used for measuring small things, like in America. For example, measuring a worm, but millimeters might be more suitable for smaller objects like bolts. Metric measurements are common in AKEA, but imperial measurements are more common elsewhere. Metric usage increases with larger measurements (e.g., above 150 millimeters).\n\n51:38 Announcer:\nSo, this small label maker is about the size of your hand, connecting to your phone via Bluetooth. Unlike traditional label makers with built-in keyboards and embossing, this one allows you to edit text, use emojis, and print using thermal technology. The printed labels are laminated and come in various colors, patterns, and cute stickers.\n\nI used it to label tubs in the basement, including plastic bins for cables with little logos on them like an apple, lightning bolt, and gravestone for obsolete cables. Even my Halloween decorations got a pumpkin label. When I told Courtney about buying this label maker, she initially doubted its usefulness. However, within 5 minutes of its arrival and demonstration, she went from being a hater to wanting to take it to work. So, label makers have had a significant glow-up, and there are many options to choose from.\n\n53:40 Wes Bos:\nOn Ali Express, you can find cute, durable labels for kids' lunch pails and cups. They withstand dishwashers too. The label maker connects to your phone with an amazing app.\n\n54:04 Announcer:\nThis app and label maker are great, with drag tools and templates for efficiency. The phone connectivity is awesome, making it very easy and enjoyable to use.\n\n54:24 Wes Bos:\nI'll pick the Chapolo 1 spot. I accidentally discovered third-party air tags, as Apple opened up the Find My App.\n\n54:43 Announcer:\nThey did.\n\n54:44 Wes Bos:\nYes, you can purchase third-party vendors' AirTags made for iPhone and approved by Apple. They are essentially cheaper alternatives to regular AirTags. I found them on sale for about $12 each (approximately $9 US), while regular AirTags cost around $35.\n\n55:21 Announcer:\nI'm seeing a 29.\n\n55:23 Wes Bos:\nAt least one-third of the Bos work great, featuring a hole for a key ring. They've been effective in 4-5 items, such as cars, kids' backpacks, and my own. They're louder than Airtags, helping locate lost items with their sound. However, unlike Airtags, they don't provide turn-by-turn directions with an arrow.\n\n56:02 Announcer:\nThese only show the last pinged location on a map, and the arrow appears when within 5 feet. Useful when in the same room but not for distant locations. It's not helpful for finding AirPods within the house. Why bother if it doesn't work properly?\n\n56:38 Wes Bos:\nI care about the loudness to find it by following the ringing, but sometimes my dogs bark and I can't hear it. The Chapolo 1 is useful since it has its own app, so I don't rely on others having it installed. The benefit of Apple's Find My is that every iPhone, MacBook, and iPad acts as a transmitter, allowing me to see where my kids or their backpacks are at school.\n\n57:30 Announcer:\nSome teachers at school might have iPhones. I recall being at the airport after our Hawaii trip, waiting for my bags. A random, older lady (around 60) who wasn't the typical tech-savvy type, told me she had an AirTag in her luggage. She was tracking its location within the airport in real-time. I thought this was brilliant, while I was just waiting for my luggage to appear.\n\n58:21 Wes Bos:\nthe baggage pickup. I thought, that's a smart call. Yep. An AirTag in luggage is essential. It resolves many problems. Alright. Check out wesbos.com/courses for my JavaScript and CSS courses. If you want to learn, give them a look.\n\n58:42 Announcer:\nCheck out Vercel's Svelte Kit course at levelup.video. We received a massive response and interest in Svelte since the release of version 1. The course covers practical project challenges in-depth, as I've built an entire eCommerce and subscription video platform using Svelte Kit. Visit levelup.video for our Svelte Kit course and use the code \"syntax\" for 30% off an annual subscription. Thanks for tuning in, and see you on Friday!\n\n59:51 Wes Bos:\nPeace.\n\n59:54 Announcer:\nVisit syntax.fm for our show archive. Remember to subscribe in your podcast player and leave a review if you enjoy the show.\n\n01:00:13 Wes Bos:\nMy name is Wes. My dog eats food on the moon.\n\n01:00:19 Announcer:\nMy name is Scott.Please buy some purple cheese before meeting my brother.\n"
      }
    ]
  },
  "output": {
    "id": "chatcmpl-7GsxcO7RjYbLCB6wMKNd8cE5l6RE1",
    "object": "chat.completion",
    "created": 1684258872,
    "model": "gpt-4-0314",
    "usage": {
      "prompt_tokens": 6344,
      "completion_tokens": 867,
      "total_tokens": 7211
    },
    "choices": [
      {
        "message": {
          "role": "assistant",
          "content": "{\n  \"title\": \"Were We Wrong? Revisiting Our 2022 Web Dev Predictions\",\n  \"description\": \"Wes Bos and Scott Tolinski look back at their 2022 web development predictions, discussing topics such as Svelte, TypeScript, GraphQL, Deno, and more.\",\n  \"notes\": \"\",\n  \"summary\": [\n    {\"time\": \"02:26\", \"text\": \"Svelte kit and its features\", \"description\": \"Wes Bos shares his excitement about Svelte kit's straightforward API and its comprehensive feature set.\"},\n    {\"time\": \"04:23\", \"text\": \"Next.js and Bos routing\", \"description\": \"The hosts discuss the benefits of Next.js and Bos routing and how they work without needing a data layer.\"},\n    {\"time\": \"05:28\", \"text\": \"Open UI development\", \"description\": \"Open UI's development aims to improve built-in UI elements in browsers by analyzing common components in various frameworks.\"},\n    {\"time\": \"06:19\", \"text\": \"Rust, Rome, and Deno\", \"description\": \"The hosts talk about the growing popularity of Rust, the development of Rome, and Deno's rising attention.\"},\n    {\"time\": \"21:48\", \"text\": \"GraphQL in 2022\", \"description\": \"Discussion around how GraphQL seems to have stagnated, with people getting exhausted and questioning its necessity for their apps.\"},\n    {\"time\": \"26:28\", \"text\": \"Deno's big year\", \"description\": \"Wes Bos shares his experiences with Deno and how it has gained popularity and support in the tech world.\"},\n    {\"time\": \"29:47\", \"text\": \"TypeScript's increasing popularity\", \"description\": \"The hosts agree that TypeScript has become the go-to choice, surpassing alternatives like Flow and Reason ML.\"}\n  ],\n  \"tweets\": [\n    \"Did Svelte kit live up to our 2022 predictions? Find out as we discuss its features in this episode of Syntax!\",\n    \"Is GraphQL stagnating? We share our thoughts on the state of GraphQL in 2022 in the latest Syntax episode!\",\n    \"Deno had a big year, but how big was it? Wes Bos shares his experiences with Deno in this Syntax podcast episode!\",\n    \"TypeScript's popularity continues to rise, but why? We discuss this and more in the latest episode of Syntax!\",\n    \"Our 2022 predictions revisited! Find out what hit the mark and what missed in this tasty web development podcast!\",\n    \"Have edge functions and developer tooling evolved in 2022? Tune in to the Syntax podcast to find out!\"\n  ],\n  \"listener_tweets\": [\n    \"@syntaxfm This episode was amazing! Loved hearing about your 2022 predictions for web development!\",\n    \"I really enjoyed the part about GraphQL in 2022 in the latest @syntaxfm episode!\",\n    \"Listening to @syntaxfm made me realize how much Deno has grown in the past year! What an insightful episode!\",\n    \"@syntaxfm I had a blast listening to your episode on the state of TypeScript in 2022!\",\n    \"Your podcast on revisiting 2022 predictions was super informative! Keep up the great work, @syntaxfm!\"\n  ],\n  \"topics\": [\"Svelte\", \"TypeScript\", \"GraphQL\", \"Deno\"],\n  \"links\": [\n    { \"name\": \"Syntax\", \"url\": \"https://syntax.fm\" },\n    { \"name\": \"Sentry\", \"url\": \"https://sentry.io\" },\n    { \"name\": \"Sanity\", \"url\": \"https://sanity.io\" },\n    { \"name\": \"Auth0\", \"url\": \"https://auth0.com\" },\n    { \"name\": \"Level Up Tutorials\", \"url\": \"https://leveluptutorials.com\" }\n  ],\n  \"speaker_times\": [\n    {\"name\": \"Wes Bos\", \"time\": \"15:24\"},\n    {\"name\": \"Scott Tolinski\", \"time\": \"18:12\"},\n    {\"name\": \"Announcer\", \"time\": \"30:17\"}\n  ],\n  \"guests\": []\n}"
        },
        "finish_reason": "stop",
        "index": 0
      }
    ]
  }
}